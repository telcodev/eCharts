/*
* generated by Xtext
*/
grammar InternalDslECharts;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package es.upm.gsi.ECharts.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.upm.gsi.ECharts.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import es.upm.gsi.ECharts.services.DslEChartsGrammarAccess;

}

@parser::members {

 	private DslEChartsGrammarAccess grammarAccess;
 	
    public InternalDslEChartsParser(TokenStream input, IAstFactory factory, DslEChartsGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("es/upm/gsi/ECharts/parser/antlr/internal/InternalDslECharts.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Root";	
   	}
   	
   	@Override
   	protected DslEChartsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRootRule(), currentNode); }
	 iv_ruleRoot=ruleRoot 
	 { $current=$iv_ruleRoot.current; } 
	 EOF 
;

// Rule Root
ruleRoot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRootAccess().getPackagePackageParserRuleCall_0_0(), currentNode); 
	    }
		lv_package_0_0=rulePackage		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"package",
	        		lv_package_0_0, 
	        		"Package", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRootAccess().getImportsImportsParserRuleCall_1_0(), currentNode); 
	    }
		lv_imports_1_0=ruleImports		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_1_0, 
	        		"Imports", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRootAccess().getMachineMachineParserRuleCall_2_0(), currentNode); 
	    }
		lv_machine_2_0=ruleMachine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRootRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"machine",
	        		lv_machine_2_0, 
	        		"Machine", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)
;





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageRule(), currentNode); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'package' 
    {
        createLeafNode(grammarAccess.getPackageAccess().getPackageKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getPackageAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportsRule(), currentNode); }
	 iv_ruleImports=ruleImports 
	 { $current=$iv_ruleImports.current; } 
	 EOF 
;

// Rule Imports
ruleImports returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportsAccess().getImportKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportsAccess().getNameQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'.*' 
    {
        createLeafNode(grammarAccess.getImportsAccess().getFullStopAsteriskKeyword_2(), null); 
    }
)?	';' 
    {
        createLeafNode(grammarAccess.getImportsAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMachineRule(), currentNode); }
	 iv_ruleMachine=ruleMachine 
	 { $current=$iv_ruleMachine.current; } 
	 EOF 
;

// Rule Machine
ruleMachine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMachineAccess().getAccessAndMachineModifierAccessAndMachineModifiersParserRuleCall_0_0(), currentNode); 
	    }
		lv_accessAndMachineModifier_0_0=ruleAccessAndMachineModifiers		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"accessAndMachineModifier",
	        		lv_accessAndMachineModifier_0_0, 
	        		"AccessAndMachineModifiers", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'machine' 
    {
        createLeafNode(grammarAccess.getMachineAccess().getMachineKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMachineAccess().getMachineBodyMachineBodyParserRuleCall_4_0(), currentNode); 
	    }
		lv_machineBody_4_0=ruleMachineBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"machineBody",
	        		lv_machineBody_4_0, 
	        		"MachineBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleUno
entryRuleUno returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnoRule(), currentNode); }
	 iv_ruleUno=ruleUno 
	 { $current=$iv_ruleUno.current; } 
	 EOF 
;

// Rule Uno
ruleUno returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnoAccess().getDosParserRuleCall_0(), currentNode); 
    }
    this_Dos_0=ruleDos
    { 
        $current = $this_Dos_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getUnoAccess().getUnoLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnoAccess().getUnoLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnoAccess().getRightDosParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_right_2_0=ruleDos		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"Dos", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleDos
entryRuleDos returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDosRule(), currentNode); }
	 iv_ruleDos=ruleDos 
	 { $current=$iv_ruleDos.current; } 
	 EOF 
;

// Rule Dos
ruleDos returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDosAccess().getHostBlockHostBlockParserRuleCall_0_0(), currentNode); 
	    }
		lv_hostBlock_0_0=ruleHostBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDosRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"hostBlock",
	        		lv_hostBlock_0_0, 
	        		"HostBlock", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDosAccess().getMachineConstructorMachineConstructorParserRuleCall_1_0(), currentNode); 
	    }
		lv_machineConstructor_1_0=ruleMachineConstructor		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDosRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"machineConstructor",
	        		lv_machineConstructor_1_0, 
	        		"MachineConstructor", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDosAccess().getStatesStatesParserRuleCall_2_0(), currentNode); 
	    }
		lv_states_2_0=ruleStates		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDosRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"states",
	        		lv_states_2_0, 
	        		"States", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDosAccess().getTransitionTransitionParserRuleCall_3_0(), currentNode); 
	    }
		lv_transition_3_0=ruleTransition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDosRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"transition",
	        		lv_transition_3_0, 
	        		"Transition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMachineBody
entryRuleMachineBody returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMachineBodyRule(), currentNode); }
	 iv_ruleMachineBody=ruleMachineBody 
	 { $current=$iv_ruleMachineBody.current; } 
	 EOF 
;

// Rule MachineBody
ruleMachineBody returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getMachineBodyAccess().getUnoParserRuleCall(), currentNode); 
    }
    this_Uno_0=ruleUno
    { 
        $current = $this_Uno_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleAccessAndMachineModifiers
entryRuleAccessAndMachineModifiers returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAccessAndMachineModifiersRule(), currentNode); }
	 iv_ruleAccessAndMachineModifiers=ruleAccessAndMachineModifiers 
	 { $current=$iv_ruleAccessAndMachineModifiers.current; } 
	 EOF 
;

// Rule AccessAndMachineModifiers
ruleAccessAndMachineModifiers returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAccessAndMachineModifiersAccess().getAccessModifierAccessModifiersEnumRuleCall_0_0(), currentNode); 
	    }
		lv_accessModifier_0_0=ruleAccessModifiers		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAccessAndMachineModifiersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"accessModifier",
	        		lv_accessModifier_0_0, 
	        		"AccessModifiers", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAccessAndMachineModifiersAccess().getMachineModifierMachineModifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_machineModifier_1_0=ruleMachineModifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAccessAndMachineModifiersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"machineModifier",
	        		lv_machineModifier_1_0, 
	        		"MachineModifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleMachineModifier
entryRuleMachineModifier returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMachineModifierRule(), currentNode); }
	 iv_ruleMachineModifier=ruleMachineModifier 
	 { $current=$iv_ruleMachineModifier.current; } 
	 EOF 
;

// Rule MachineModifier
ruleMachineModifier returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_concurrent_0_0=	'concurrent' 
    {
        createLeafNode(grammarAccess.getMachineModifierAccess().getConcurrentConcurrentKeyword_0(), "concurrent"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMachineModifierRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "concurrent", lv_concurrent_0_0, "concurrent", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleStates
entryRuleStates returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatesRule(), currentNode); }
	 iv_ruleStates=ruleStates 
	 { $current=$iv_ruleStates.current; } 
	 EOF 
;

// Rule States
ruleStates returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatesAccess().getStateModsStateModifiersEnumRuleCall_0_0(), currentNode); 
	    }
		lv_stateMods_0_0=ruleStateModifiers		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"stateMods",
	        		lv_stateMods_0_0, 
	        		"StateModifiers", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'state' 
    {
        createLeafNode(grammarAccess.getStatesAccess().getStateKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatesAccess().getNameQualifiedNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatesAccess().getEnEntryParserRuleCall_3_0(), currentNode); 
	    }
		lv_en_3_0=ruleEntry		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"en",
	        		lv_en_3_0, 
	        		"Entry", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatesAccess().getExExitParserRuleCall_4_0(), currentNode); 
	    }
		lv_ex_4_0=ruleExit		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ex",
	        		lv_ex_4_0, 
	        		"Exit", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?((	':' 
    {
        createLeafNode(grammarAccess.getStatesAccess().getColonKeyword_5_0_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatesAccess().getSubmachineSubMachineParserRuleCall_5_0_1_0_0(), currentNode); 
	    }
		lv_submachine_6_0=ruleSubMachine		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"submachine",
	        		lv_submachine_6_0, 
	        		"SubMachine", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatesAccess().getMachineInvocationsMachineInvocationParserRuleCall_5_0_1_1_0(), currentNode); 
	    }
		lv_machineInvocations_7_0=ruleMachineInvocation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"machineInvocations",
	        		lv_machineInvocations_7_0, 
	        		"MachineInvocation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
    |	';' 
    {
        createLeafNode(grammarAccess.getStatesAccess().getSemicolonKeyword_5_1(), null); 
    }
))
;





// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntryRule(), currentNode); }
	 iv_ruleEntry=ruleEntry 
	 { $current=$iv_ruleEntry.current; } 
	 EOF 
;

// Rule Entry
ruleEntry returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'entry' 
    {
        createLeafNode(grammarAccess.getEntryAccess().getEntryKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntryAccess().getAActionParserRuleCall_1_0(), currentNode); 
	    }
		lv_a_1_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntryRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_1_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleExit
entryRuleExit returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExitRule(), currentNode); }
	 iv_ruleExit=ruleExit 
	 { $current=$iv_ruleExit.current; } 
	 EOF 
;

// Rule Exit
ruleExit returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'exit' 
    {
        createLeafNode(grammarAccess.getExitAccess().getExitKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExitAccess().getAActionParserRuleCall_1_0(), currentNode); 
	    }
		lv_a_1_0=ruleAction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExitRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"a",
	        		lv_a_1_0, 
	        		"Action", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleMachineConstructor
entryRuleMachineConstructor returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMachineConstructorRule(), currentNode); }
	 iv_ruleMachineConstructor=ruleMachineConstructor 
	 { $current=$iv_ruleMachineConstructor.current; } 
	 EOF 
;

// Rule MachineConstructor
ruleMachineConstructor returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'public' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getPublicKeyword_0(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getMachineConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getMachineConstructorAccess().getMachineNameMachineCrossReference_1_0(), "machineName"); 
	}

)
)	'(' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMachineConstructorAccess().getParamsMachineParamsDeclarationParserRuleCall_3_0(), currentNode); 
	    }
		lv_paramsMachine_3_0=ruleparamsDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMachineConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"paramsMachine",
	        		lv_paramsMachine_3_0, 
	        		"paramsDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getRightParenthesisKeyword_4(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getLeftCurlyBracketKeyword_5(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMachineConstructorAccess().getExprExpressionParserRuleCall_6_0_0(), currentNode); 
	    }
		lv_expr_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMachineConstructorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expr",
	        		lv_expr_6_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'(' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getLeftParenthesisKeyword_6_1_0_0(), null); 
    }
RULE_STRING
    { 
    createLeafNode(grammarAccess.getMachineConstructorAccess().getSTRINGTerminalRuleCall_6_1_0_1(), null); 
    }
	')' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getRightParenthesisKeyword_6_1_0_2(), null); 
    }
)
    |	'()' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getLeftParenthesisRightParenthesisKeyword_6_1_1(), null); 
    }
)?	';' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getSemicolonKeyword_6_2(), null); 
    }
)+	'}' 
    {
        createLeafNode(grammarAccess.getMachineConstructorAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleMachineInvocation
entryRuleMachineInvocation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMachineInvocationRule(), currentNode); }
	 iv_ruleMachineInvocation=ruleMachineInvocation 
	 { $current=$iv_ruleMachineInvocation.current; } 
	 EOF 
;

// Rule MachineInvocation
ruleMachineInvocation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMachineInvocationAccess().getMachineInvocationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMachineInvocationAccess().getMachineInvocationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)RULE_ID
    { 
    createLeafNode(grammarAccess.getMachineInvocationAccess().getIDTerminalRuleCall_1(), null); 
    }
((	'(' 
    {
        createLeafNode(grammarAccess.getMachineInvocationAccess().getLeftParenthesisKeyword_2_0_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getMachineInvocationAccess().getParamsInvocationParserRuleCall_2_0_1(), currentNode); 
    }
ruleparamsInvocation
    { 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getMachineInvocationAccess().getRightParenthesisKeyword_2_0_2(), null); 
    }
)
    |	'()' 
    {
        createLeafNode(grammarAccess.getMachineInvocationAccess().getLeftParenthesisRightParenthesisKeyword_2_1(), null); 
    }
)	';' 
    {
        createLeafNode(grammarAccess.getMachineInvocationAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleparamsDeclaration
entryRuleparamsDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParamsDeclarationRule(), currentNode); }
	 iv_ruleparamsDeclaration=ruleparamsDeclaration 
	 { $current=$iv_ruleparamsDeclaration.current; } 
	 EOF 
;

// Rule paramsDeclaration
ruleparamsDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_paramtype_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_0_0_0(), "paramtype"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paramtype",
	        		lv_paramtype_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_0_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |(((
(
		lv_paramtype_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_1_0_0_0(), "paramtype"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paramtype",
	        		lv_paramtype_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_1_0_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getParamsDeclarationAccess().getCommaKeyword_1_0_2(), null); 
    }
)+(
(
		lv_paramtype_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_1_1_0(), "paramtype"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"paramtype",
	        		lv_paramtype_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_name_6_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_1_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamsDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_6_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)))
;





// Entry rule entryRuleparamsInvocation
entryRuleparamsInvocation returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParamsInvocationRule(), currentNode); } 
	 iv_ruleparamsInvocation=ruleparamsInvocation 
	 { $current=$iv_ruleparamsInvocation.current.getText(); }  
	 EOF 
;

// Rule paramsInvocation
ruleparamsInvocation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_0(), null); 
    }

    |((    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    createLeafNode(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_1_0_0(), null); 
    }

	kw=',' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getParamsInvocationAccess().getCommaKeyword_1_0_1(), null); 
    }
)+    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_1_1(), null); 
    }
))
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'this.' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getThisKeyword_0(), null); 
    }
)?(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getSecondAssingExpressionParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_second_2_1=ruleAssingExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"second",
	        		lv_second_2_1, 
	        		"AssingExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

    |		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getSecondAdmiredExpressionParserRuleCall_2_0_1(), currentNode); 
	    }
		lv_second_2_2=ruleAdmiredExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"second",
	        		lv_second_2_2, 
	        		"AdmiredExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)

)
))
;





// Entry rule entryRuleAssingExpression
entryRuleAssingExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssingExpressionRule(), currentNode); }
	 iv_ruleAssingExpression=ruleAssingExpression 
	 { $current=$iv_ruleAssingExpression.current; } 
	 EOF 
;

// Rule AssingExpression
ruleAssingExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'=' 
    {
        createLeafNode(grammarAccess.getAssingExpressionAccess().getEqualsSignKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAssingExpressionAccess().getAdditionParserRuleCall_1(), currentNode); 
    }
    this_Addition_1=ruleAddition
    { 
        $current = $this_Addition_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAdmiredExpression
entryRuleAdmiredExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdmiredExpressionRule(), currentNode); }
	 iv_ruleAdmiredExpression=ruleAdmiredExpression 
	 { $current=$iv_ruleAdmiredExpression.current; } 
	 EOF 
;

// Rule AdmiredExpression
ruleAdmiredExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'!' 
    {
        createLeafNode(grammarAccess.getAdmiredExpressionAccess().getExclamationMarkKeyword_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getAdmiredExpressionAccess().getAdditionParserRuleCall_1(), currentNode); 
    }
    this_Addition_1=ruleAddition
    { 
        $current = $this_Addition_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditionRule(), currentNode); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0(), currentNode); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAdditionAccess().getAddtionLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditionAccess().getAddtionLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'+' 
    {
        createLeafNode(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Multiplication", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicationRule(), currentNode); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0(), currentNode); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"Primary", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryRule(), currentNode); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_0(), currentNode); 
    }
    this_NumberLiteral_0=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |(	'(' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1(), currentNode); 
    }
    this_Addition_2=ruleAddition
    { 
        $current = $this_Addition_2.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberLiteralRule(), currentNode); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_valueINT_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getNumberLiteralAccess().getValueINTINTTerminalRuleCall_0_0(), "valueINT"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueINT",
	        		lv_valueINT_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumberLiteralAccess().getValueIDQualifiedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_valueID_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"valueID",
	        		lv_valueID_1_0, 
	        		"QualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getNumberLiteralAccess().getRefValueExpressionCrossReference_2_0(), "refValue"); 
	}

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameRule(), currentNode); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0(), null); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    createLeafNode(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1(), null); 
    }
)*)
    ;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionRule(), currentNode); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getActionAccess().getActionBlockParserRuleCall_0(), currentNode); 
    }
    this_ActionBlock_0=ruleActionBlock
    { 
        $current = $this_ActionBlock_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getActionAccess().getActionStatementParserRuleCall_1(), currentNode); 
    }
    this_ActionStatement_1=ruleActionStatement
    { 
        $current = $this_ActionStatement_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleActionBlock
entryRuleActionBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionBlockRule(), currentNode); }
	 iv_ruleActionBlock=ruleActionBlock 
	 { $current=$iv_ruleActionBlock.current; } 
	 EOF 
;

// Rule ActionBlock
ruleActionBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getActionBlockAccess().getNameSTRINGTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleActionStatement
entryRuleActionStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getActionStatementRule(), currentNode); }
	 iv_ruleActionStatement=ruleActionStatement 
	 { $current=$iv_ruleActionStatement.current; } 
	 EOF 
;

// Rule ActionStatement
ruleActionStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_name_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getActionStatementAccess().getNameSTRINGTerminalRuleCall_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getActionStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTransitionRule(), currentNode); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'transition' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getTransitionKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getFromTargetTrnParserRuleCall_1_0(), currentNode); 
	    }
		lv_from_1_0=ruleTargetTrn		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"from",
	        		lv_from_1_0, 
	        		"TargetTrn", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_at_2_0=RULE_ASSINGTRANSITION
		{
			createLeafNode(grammarAccess.getTransitionAccess().getAtAssingTransitionTerminalRuleCall_2_0(), "at"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"at",
	        		lv_at_2_0, 
	        		"AssingTransition", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTransitionAccess().getToTargetTrnParserRuleCall_3_0(), currentNode); 
	    }
		lv_to_3_0=ruleTargetTrn		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTransitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"to",
	        		lv_to_3_0, 
	        		"TargetTrn", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getTransitionAccess().getSemicolonKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleTargetTrn
entryRuleTargetTrn returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTargetTrnRule(), currentNode); }
	 iv_ruleTargetTrn=ruleTargetTrn 
	 { $current=$iv_ruleTargetTrn.current; } 
	 EOF 
;

// Rule TargetTrn
ruleTargetTrn returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTargetTrnAccess().getFromToSingleStateParserRuleCall_0_0(), currentNode); 
	    }
		lv_fromTo_0_0=ruleSingleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTargetTrnRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fromTo",
	        		lv_fromTo_0_0, 
	        		"SingleState", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(	'[' 
    {
        createLeafNode(grammarAccess.getTargetTrnAccess().getLeftSquareBracketKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTargetTrnAccess().getFromToListListStatesParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_fromToList_2_0=ruleListStates		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTargetTrnRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"fromToList",
	        		lv_fromToList_2_0, 
	        		"ListStates", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getTargetTrnAccess().getRightSquareBracketKeyword_1_2(), null); 
    }
))
;





// Entry rule entryRuleSingleState
entryRuleSingleState returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSingleStateRule(), currentNode); }
	 iv_ruleSingleState=ruleSingleState 
	 { $current=$iv_ruleSingleState.current; } 
	 EOF 
;

// Rule SingleState
ruleSingleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSingleStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSingleStateAccess().getFromToStatesCrossReference_0(), currentNode); 
	    }
		ruleQualifiedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleListStates
entryRuleListStates returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getListStatesRule(), currentNode); }
	 iv_ruleListStates=ruleListStates 
	 { $current=$iv_ruleListStates.current; } 
	 EOF 
;

// Rule ListStates
ruleListStates returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListStatesAccess().getListSingleStateParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_list_0_0=ruleSingleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"list",
	        		lv_list_0_0, 
	        		"SingleState", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getListStatesAccess().getCommaKeyword_0_1(), null); 
    }
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getListStatesAccess().getListSingleStateParserRuleCall_1_0(), currentNode); 
	    }
		lv_list_2_0=ruleSingleState		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getListStatesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"list",
	        		lv_list_2_0, 
	        		"SingleState", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleHostBlock
entryRuleHostBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getHostBlockRule(), currentNode); }
	 iv_ruleHostBlock=ruleHostBlock 
	 { $current=$iv_ruleHostBlock.current; } 
	 EOF 
;

// Rule HostBlock
ruleHostBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_text_0_0=RULE_PLAINTEXT
		{
			createLeafNode(grammarAccess.getHostBlockAccess().getTextPlainTextTerminalRuleCall_0(), "text"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getHostBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"text",
	        		lv_text_0_0, 
	        		"plainText", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleSubMachine
entryRuleSubMachine returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubMachineRule(), currentNode); }
	 iv_ruleSubMachine=ruleSubMachine 
	 { $current=$iv_ruleSubMachine.current; } 
	 EOF 
;

// Rule SubMachine
ruleSubMachine returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getSubMachineAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubMachineAccess().getMachineModifierMachineModifierParserRuleCall_1_0(), currentNode); 
	    }
		lv_machineModifier_1_0=ruleMachineModifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"machineModifier",
	        		lv_machineModifier_1_0, 
	        		"MachineModifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSubMachineAccess().getMachineBodyMachineBodyParserRuleCall_2_0(), currentNode); 
	    }
		lv_MachineBody_2_0=ruleMachineBody		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubMachineRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"MachineBody",
	        		lv_MachineBody_2_0, 
	        		"MachineBody", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getSubMachineAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;













// Rule AccessModifiers
ruleAccessModifiers returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'private' 
	{
        $current = grammarAccess.getAccessModifiersAccess().getPRIVATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAccessModifiersAccess().getPRIVATEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'public' 
	{
        $current = grammarAccess.getAccessModifiersAccess().getPUBLICEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAccessModifiersAccess().getPUBLICEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'protected' 
	{
        $current = grammarAccess.getAccessModifiersAccess().getPROTECTEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAccessModifiersAccess().getPROTECTEDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'final' 
	{
        $current = grammarAccess.getAccessModifiersAccess().getFINALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAccessModifiersAccess().getFINALEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'abstract' 
	{
        $current = grammarAccess.getAccessModifiersAccess().getABSTRACTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAccessModifiersAccess().getABSTRACTEnumLiteralDeclaration_4(), null); 
    }
));



// Rule StateModifiers
ruleStateModifiers returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'initial' 
	{
        $current = grammarAccess.getStateModifiersAccess().getINITIALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateModifiersAccess().getINITIALEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'nonterminal' 
	{
        $current = grammarAccess.getStateModifiersAccess().getNONTERMINALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateModifiersAccess().getNONTERMINALEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'concurent' 
	{
        $current = grammarAccess.getStateModifiersAccess().getCONCURRENTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getStateModifiersAccess().getCONCURRENTEnumLiteralDeclaration_2(), null); 
    }
));



RULE_ASSINGTRANSITION : ('-->'|'- [' ( options {greedy=false;} : . )*'] /' ( options {greedy=false;} : . )*'->'|'-' RULE_ID '?' RULE_ID '/' ( options {greedy=false;} : . )*'->');

RULE_PLAINTEXT : '<* ' ( options {greedy=false;} : . )*'*>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


