/*
* generated by Xtext
*/

package es.upm.gsi.ECharts.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DslEChartsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportsParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cMachineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMachineMachineParserRuleCall_2_0 = (RuleCall)cMachineAssignment_2.eContents().get(0);
		
		//Root: //The first is to write the package and then define a machine
		//	package=Package imports+=Imports* machine+=Machine+;
		public ParserRule getRule() { return rule; }

		////The first is to write the package and then define a machine
		//package=Package imports+=Imports* machine+=Machine+
		public Group getGroup() { return cGroup; }

		////The first is to write the package and then define a machine
		//package=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }

		//imports+=Imports*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Imports
		public RuleCall getImportsImportsParserRuleCall_1_0() { return cImportsImportsParserRuleCall_1_0; }

		//machine+=Machine+
		public Assignment getMachineAssignment_2() { return cMachineAssignment_2; }

		//Machine
		public RuleCall getMachineMachineParserRuleCall_2_0() { return cMachineMachineParserRuleCall_2_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package:
		//	"package" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"package" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Imports:
		//	"import" name=QualifiedName ".*"? ";";
		public ParserRule getRule() { return rule; }

		//"import" name=QualifiedName ".*"? ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_2() { return cFullStopAsteriskKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessAndMachineModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessAndMachineModifierAccessAndMachineModifiersParserRuleCall_0_0 = (RuleCall)cAccessAndMachineModifierAssignment_0.eContents().get(0);
		private final Keyword cMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMachineBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMachineBodyMachineBodyParserRuleCall_4_0 = (RuleCall)cMachineBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////top level machine definition  												----+----
		//Machine:
		//	accessAndMachineModifier=AccessAndMachineModifiers "machine" name=ID "{" //machine body
		//	machineBody=MachineBody "}";
		public ParserRule getRule() { return rule; }

		//accessAndMachineModifier=AccessAndMachineModifiers "machine" name=ID "{" //machine body
		//machineBody=MachineBody "}"
		public Group getGroup() { return cGroup; }

		//accessAndMachineModifier=AccessAndMachineModifiers
		public Assignment getAccessAndMachineModifierAssignment_0() { return cAccessAndMachineModifierAssignment_0; }

		//AccessAndMachineModifiers
		public RuleCall getAccessAndMachineModifierAccessAndMachineModifiersParserRuleCall_0_0() { return cAccessAndMachineModifierAccessAndMachineModifiersParserRuleCall_0_0; }

		//"machine"
		public Keyword getMachineKeyword_1() { return cMachineKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//machineBody=MachineBody
		public Assignment getMachineBodyAssignment_4() { return cMachineBodyAssignment_4; }

		//MachineBody
		public RuleCall getMachineBodyMachineBodyParserRuleCall_4_0() { return cMachineBodyMachineBodyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class UnoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Uno");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDosParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cUnoLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightDosParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		////Various statements inside a machine body:
		////state definition, transition definition, host language
		//// block, or machine constructor
		/// *
		//MachineBody:
		//
		//(hostBlock+=HostBlock)*
		//(machineConstructor+=MachineConstructor)? 
		//(states+=States)+ 
		//(transition+=Transition)*;
		//
		// * ///to allow the writting one or more of hostBlock,MachineConstructor,States or Transitions, regardless of the order between each other.
		////when Uno had been resolved we can added other rules like Dos.
		//Uno returns MachineBody:
		//	Dos ({Uno.left=current} right=Dos)*;
		public ParserRule getRule() { return rule; }

		//Dos ({Uno.left=current} right=Dos)*
		public Group getGroup() { return cGroup; }

		//Dos
		public RuleCall getDosParserRuleCall_0() { return cDosParserRuleCall_0; }

		//({Uno.left=current} right=Dos)*
		public Group getGroup_1() { return cGroup_1; }

		//{Uno.left=current}
		public Action getUnoLeftAction_1_0() { return cUnoLeftAction_1_0; }

		//right=Dos
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Dos
		public RuleCall getRightDosParserRuleCall_1_1_0() { return cRightDosParserRuleCall_1_1_0; }
	}

	public class DosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dos");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHostBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHostBlockHostBlockParserRuleCall_0_0 = (RuleCall)cHostBlockAssignment_0.eContents().get(0);
		private final Assignment cMachineConstructorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMachineConstructorMachineConstructorParserRuleCall_1_0 = (RuleCall)cMachineConstructorAssignment_1.eContents().get(0);
		private final Assignment cStatesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatesStatesParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Assignment cTransitionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0 = (RuleCall)cTransitionAssignment_3.eContents().get(0);
		
		//Dos returns MachineBody:
		//	hostBlock=HostBlock | machineConstructor=MachineConstructor | states=States | transition=Transition;
		public ParserRule getRule() { return rule; }

		//hostBlock=HostBlock | machineConstructor=MachineConstructor | states=States | transition=Transition
		public Alternatives getAlternatives() { return cAlternatives; }

		//hostBlock=HostBlock
		public Assignment getHostBlockAssignment_0() { return cHostBlockAssignment_0; }

		//HostBlock
		public RuleCall getHostBlockHostBlockParserRuleCall_0_0() { return cHostBlockHostBlockParserRuleCall_0_0; }

		//machineConstructor=MachineConstructor
		public Assignment getMachineConstructorAssignment_1() { return cMachineConstructorAssignment_1; }

		//MachineConstructor
		public RuleCall getMachineConstructorMachineConstructorParserRuleCall_1_0() { return cMachineConstructorMachineConstructorParserRuleCall_1_0; }

		//states=States
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//States
		public RuleCall getStatesStatesParserRuleCall_2_0() { return cStatesStatesParserRuleCall_2_0; }

		//transition=Transition
		public Assignment getTransitionAssignment_3() { return cTransitionAssignment_3; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0() { return cTransitionTransitionParserRuleCall_3_0; }
	}

	public class MachineBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MachineBody");
		private final RuleCall cUnoParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MachineBody:
		//	Uno;
		public ParserRule getRule() { return rule; }

		//Uno
		public RuleCall getUnoParserRuleCall() { return cUnoParserRuleCall; }
	}

	public class AccessAndMachineModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessAndMachineModifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessModifierAccessModifiersEnumRuleCall_0_0 = (RuleCall)cAccessModifierAssignment_0.eContents().get(0);
		private final Assignment cMachineModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMachineModifierMachineModifierParserRuleCall_1_0 = (RuleCall)cMachineModifierAssignment_1.eContents().get(0);
		
		//AccessAndMachineModifiers:
		//	accessModifier=AccessModifiers machineModifier=MachineModifier?;
		public ParserRule getRule() { return rule; }

		//accessModifier=AccessModifiers machineModifier=MachineModifier?
		public Group getGroup() { return cGroup; }

		//accessModifier=AccessModifiers
		public Assignment getAccessModifierAssignment_0() { return cAccessModifierAssignment_0; }

		//AccessModifiers
		public RuleCall getAccessModifierAccessModifiersEnumRuleCall_0_0() { return cAccessModifierAccessModifiersEnumRuleCall_0_0; }

		//machineModifier=MachineModifier?
		public Assignment getMachineModifierAssignment_1() { return cMachineModifierAssignment_1; }

		//MachineModifier
		public RuleCall getMachineModifierMachineModifierParserRuleCall_1_0() { return cMachineModifierMachineModifierParserRuleCall_1_0; }
	}

	public class MachineModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MachineModifier");
		private final Assignment cConcurrentAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cConcurrentConcurrentKeyword_0 = (Keyword)cConcurrentAssignment.eContents().get(0);
		
		//MachineModifier:
		//	concurrent="concurrent";
		public ParserRule getRule() { return rule; }

		//concurrent="concurrent"
		public Assignment getConcurrentAssignment() { return cConcurrentAssignment; }

		//"concurrent"
		public Keyword getConcurrentConcurrentKeyword_0() { return cConcurrentConcurrentKeyword_0; }
	}

	public class StatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "States");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateModsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStateModsStateModifiersEnumRuleCall_0_0 = (RuleCall)cStateModsAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cEnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnEntryParserRuleCall_3_0 = (RuleCall)cEnAssignment_3.eContents().get(0);
		private final Assignment cExAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExExitParserRuleCall_4_0 = (RuleCall)cExAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cColonKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_0_1 = (Alternatives)cGroup_5_0.eContents().get(1);
		private final Assignment cSubmachineAssignment_5_0_1_0 = (Assignment)cAlternatives_5_0_1.eContents().get(0);
		private final RuleCall cSubmachineSubMachineParserRuleCall_5_0_1_0_0 = (RuleCall)cSubmachineAssignment_5_0_1_0.eContents().get(0);
		private final Assignment cMachineInvocationsAssignment_5_0_1_1 = (Assignment)cAlternatives_5_0_1.eContents().get(1);
		private final RuleCall cMachineInvocationsMachineInvocationParserRuleCall_5_0_1_1_0 = (RuleCall)cMachineInvocationsAssignment_5_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		////end top level machine definition  											---------
		////states  																		----+----
		//States:
		//	stateMods=StateModifiers? "state" name=QualifiedName en=Entry? ex=Exit? (":" (submachine=SubMachine |
		//	machineInvocations=MachineInvocation) //(':' submachine=SubMachine)?; 
		//	//((':' submachine=SubMachine) | ';');
		//	| ";");
		public ParserRule getRule() { return rule; }

		//stateMods=StateModifiers? "state" name=QualifiedName en=Entry? ex=Exit? (":" (submachine=SubMachine |
		//machineInvocations=MachineInvocation) //(':' submachine=SubMachine)?; 
		////((':' submachine=SubMachine) | ';');
		//| ";")
		public Group getGroup() { return cGroup; }

		//stateMods=StateModifiers?
		public Assignment getStateModsAssignment_0() { return cStateModsAssignment_0; }

		//StateModifiers
		public RuleCall getStateModsStateModifiersEnumRuleCall_0_0() { return cStateModsStateModifiersEnumRuleCall_0_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//en=Entry?
		public Assignment getEnAssignment_3() { return cEnAssignment_3; }

		//Entry
		public RuleCall getEnEntryParserRuleCall_3_0() { return cEnEntryParserRuleCall_3_0; }

		//ex=Exit?
		public Assignment getExAssignment_4() { return cExAssignment_4; }

		//Exit
		public RuleCall getExExitParserRuleCall_4_0() { return cExExitParserRuleCall_4_0; }

		//":" (submachine=SubMachine | machineInvocations=MachineInvocation) //(':' submachine=SubMachine)?; 
		////((':' submachine=SubMachine) | ';');
		//| ";"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//":" (submachine=SubMachine | machineInvocations=MachineInvocation)
		public Group getGroup_5_0() { return cGroup_5_0; }

		//":"
		public Keyword getColonKeyword_5_0_0() { return cColonKeyword_5_0_0; }

		//submachine=SubMachine | machineInvocations=MachineInvocation
		public Alternatives getAlternatives_5_0_1() { return cAlternatives_5_0_1; }

		//submachine=SubMachine
		public Assignment getSubmachineAssignment_5_0_1_0() { return cSubmachineAssignment_5_0_1_0; }

		//SubMachine
		public RuleCall getSubmachineSubMachineParserRuleCall_5_0_1_0_0() { return cSubmachineSubMachineParserRuleCall_5_0_1_0_0; }

		//machineInvocations=MachineInvocation
		public Assignment getMachineInvocationsAssignment_5_0_1_1() { return cMachineInvocationsAssignment_5_0_1_1; }

		//MachineInvocation
		public RuleCall getMachineInvocationsMachineInvocationParserRuleCall_5_0_1_1_0() { return cMachineInvocationsMachineInvocationParserRuleCall_5_0_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAActionParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//Entry:
		//	"entry" a=Action;
		public ParserRule getRule() { return rule; }

		//"entry" a=Action
		public Group getGroup() { return cGroup; }

		//"entry"
		public Keyword getEntryKeyword_0() { return cEntryKeyword_0; }

		//a=Action
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//Action
		public RuleCall getAActionParserRuleCall_1_0() { return cAActionParserRuleCall_1_0; }
	}

	public class ExitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAActionParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//Exit:
		//	"exit" a=Action;
		public ParserRule getRule() { return rule; }

		//"exit" a=Action
		public Group getGroup() { return cGroup; }

		//"exit"
		public Keyword getExitKeyword_0() { return cExitKeyword_0; }

		//a=Action
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//Action
		public RuleCall getAActionParserRuleCall_1_0() { return cAActionParserRuleCall_1_0; }
	}

	public class MachineConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MachineConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMachineNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMachineNameMachineCrossReference_1_0 = (CrossReference)cMachineNameAssignment_1.eContents().get(0);
		private final RuleCall cMachineNameMachineIDTerminalRuleCall_1_0_1 = (RuleCall)cMachineNameMachineCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsMachineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsMachineParamsDeclarationParserRuleCall_3_0 = (RuleCall)cParamsMachineAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cExprAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_6_0_0 = (RuleCall)cExprAssignment_6_0.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cAlternatives_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1_0_0 = (Keyword)cGroup_6_1_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_6_1_0_1 = (RuleCall)cGroup_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_1_0_2 = (Keyword)cGroup_6_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_6_1_1 = (Keyword)cAlternatives_6_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////end states  																	---------
		////machineConstructors  															----+----
		////public...
		//MachineConstructor:
		//	"public" machineName=[Machine] "(" paramsMachine=paramsDeclaration ")" "{" //expressions
		//	//(expr+=(AdmiredExpression | AssingExpression) ';')+
		//	(expr+=Expression ("(" STRING ")" | "()")? ";")+ "}";
		public ParserRule getRule() { return rule; }

		//"public" machineName=[Machine] "(" paramsMachine=paramsDeclaration ")" "{" //expressions
		////(expr+=(AdmiredExpression | AssingExpression) ';')+
		//(expr+=Expression ("(" STRING ")" | "()")? ";")+ "}"
		public Group getGroup() { return cGroup; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//machineName=[Machine]
		public Assignment getMachineNameAssignment_1() { return cMachineNameAssignment_1; }

		//[Machine]
		public CrossReference getMachineNameMachineCrossReference_1_0() { return cMachineNameMachineCrossReference_1_0; }

		//ID
		public RuleCall getMachineNameMachineIDTerminalRuleCall_1_0_1() { return cMachineNameMachineIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//paramsMachine=paramsDeclaration
		public Assignment getParamsMachineAssignment_3() { return cParamsMachineAssignment_3; }

		//paramsDeclaration
		public RuleCall getParamsMachineParamsDeclarationParserRuleCall_3_0() { return cParamsMachineParamsDeclarationParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(expr+=Expression ("(" STRING ")" | "()")? ";")+
		public Group getGroup_6() { return cGroup_6; }

		//expr+=Expression
		public Assignment getExprAssignment_6_0() { return cExprAssignment_6_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_6_0_0() { return cExprExpressionParserRuleCall_6_0_0; }

		//("(" STRING ")" | "()")?
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//"(" STRING ")"
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1_0_0() { return cLeftParenthesisKeyword_6_1_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6_1_0_1() { return cSTRINGTerminalRuleCall_6_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6_1_0_2() { return cRightParenthesisKeyword_6_1_0_2; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_6_1_1() { return cLeftParenthesisRightParenthesisKeyword_6_1_1; }

		//";"
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MachineInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MachineInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineInvocationAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cParamsInvocationParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////params should be a cross reference, but I Don't know how to parse it.
		//MachineInvocation:
		//	{MachineInvocation} ID ("(" paramsInvocation ")" | "()") ";";
		public ParserRule getRule() { return rule; }

		//{MachineInvocation} ID ("(" paramsInvocation ")" | "()") ";"
		public Group getGroup() { return cGroup; }

		//{MachineInvocation}
		public Action getMachineInvocationAction_0() { return cMachineInvocationAction_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//"(" paramsInvocation ")" | "()"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"(" paramsInvocation ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }

		//paramsInvocation
		public RuleCall getParamsInvocationParserRuleCall_2_0_1() { return cParamsInvocationParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_1() { return cLeftParenthesisRightParenthesisKeyword_2_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ParamsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramsDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cParamtypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cParamtypeIDTerminalRuleCall_0_0_0 = (RuleCall)cParamtypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cParamtypeAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cParamtypeIDTerminalRuleCall_1_0_0_0 = (RuleCall)cParamtypeAssignment_1_0_0.eContents().get(0);
		private final Assignment cNameAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0_1_0 = (RuleCall)cNameAssignment_1_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cParamtypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamtypeIDTerminalRuleCall_1_1_0 = (RuleCall)cParamtypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//paramsDeclaration:
		//	paramtype+=ID name+=ID | (paramtype+=ID name+=ID ",")+ paramtype+=ID name+=ID;
		public ParserRule getRule() { return rule; }

		//paramtype+=ID name+=ID | (paramtype+=ID name+=ID ",")+ paramtype+=ID name+=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//paramtype+=ID name+=ID
		public Group getGroup_0() { return cGroup_0; }

		//paramtype+=ID
		public Assignment getParamtypeAssignment_0_0() { return cParamtypeAssignment_0_0; }

		//ID
		public RuleCall getParamtypeIDTerminalRuleCall_0_0_0() { return cParamtypeIDTerminalRuleCall_0_0_0; }

		//name+=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//(paramtype+=ID name+=ID ",")+ paramtype+=ID name+=ID
		public Group getGroup_1() { return cGroup_1; }

		//(paramtype+=ID name+=ID ",")+
		public Group getGroup_1_0() { return cGroup_1_0; }

		//paramtype+=ID
		public Assignment getParamtypeAssignment_1_0_0() { return cParamtypeAssignment_1_0_0; }

		//ID
		public RuleCall getParamtypeIDTerminalRuleCall_1_0_0_0() { return cParamtypeIDTerminalRuleCall_1_0_0_0; }

		//name+=ID
		public Assignment getNameAssignment_1_0_1() { return cNameAssignment_1_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_1_0() { return cNameIDTerminalRuleCall_1_0_1_0; }

		//","
		public Keyword getCommaKeyword_1_0_2() { return cCommaKeyword_1_0_2; }

		//paramtype+=ID
		public Assignment getParamtypeAssignment_1_1() { return cParamtypeAssignment_1_1; }

		//ID
		public RuleCall getParamtypeIDTerminalRuleCall_1_1_0() { return cParamtypeIDTerminalRuleCall_1_1_0; }

		//name+=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
	}

	public class ParamsInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "paramsInvocation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//paramsInvocation returns ecore::EString:
		//	ID | (ID ",")+ ID;
		public ParserRule getRule() { return rule; }

		//ID | (ID ",")+ ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(ID ",")+ ID
		public Group getGroup_1() { return cGroup_1; }

		//(ID ",")+
		public Group getGroup_1_0() { return cGroup_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0_0() { return cIDTerminalRuleCall_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_0_1() { return cCommaKeyword_1_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSecondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cSecondAlternatives_2_0 = (Alternatives)cSecondAssignment_2.eContents().get(0);
		private final RuleCall cSecondAssingExpressionParserRuleCall_2_0_0 = (RuleCall)cSecondAlternatives_2_0.eContents().get(0);
		private final RuleCall cSecondAdmiredExpressionParserRuleCall_2_0_1 = (RuleCall)cSecondAlternatives_2_0.eContents().get(1);
		
		////expressions
		//Expression:
		//	"this."? name=ID second=(AssingExpression | AdmiredExpression);
		public ParserRule getRule() { return rule; }

		//"this."? name=ID second=(AssingExpression | AdmiredExpression)
		public Group getGroup() { return cGroup; }

		//"this."?
		public Keyword getThisKeyword_0() { return cThisKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//second=(AssingExpression | AdmiredExpression)
		public Assignment getSecondAssignment_2() { return cSecondAssignment_2; }

		//AssingExpression | AdmiredExpression
		public Alternatives getSecondAlternatives_2_0() { return cSecondAlternatives_2_0; }

		//AssingExpression
		public RuleCall getSecondAssingExpressionParserRuleCall_2_0_0() { return cSecondAssingExpressionParserRuleCall_2_0_0; }

		//AdmiredExpression
		public RuleCall getSecondAdmiredExpressionParserRuleCall_2_0_1() { return cSecondAdmiredExpressionParserRuleCall_2_0_1; }
	}

	public class AssingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////second=Addition;
		//AssingExpression:
		//	"=" Addition;
		public ParserRule getRule() { return rule; }

		//"=" Addition
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_1() { return cAdditionParserRuleCall_1; }
	}

	public class AdmiredExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdmiredExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AdmiredExpression returns Expression:
		//	"!" Addition;
		public ParserRule getRule() { return rule; }

		//"!" Addition
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_1() { return cAdditionParserRuleCall_1; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddtionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression: //(alreadyExistValue=[Expression] | newValueId=ID | newValueInt=INT);
		//	Multiplication ({Addtion.left=current} "+" right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		////(alreadyExistValue=[Expression] | newValueId=ID | newValueInt=INT);
		//Multiplication ({Addtion.left=current} "+" right=Multiplication)*
		public Group getGroup() { return cGroup; }

		////(alreadyExistValue=[Expression] | newValueId=ID | newValueInt=INT);
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Addtion.left=current} "+" right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Addtion.left=current}
		public Action getAddtionLeftAction_1_0() { return cAddtionLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Primary ({Multiplication.left=current} "*" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Multiplication.left=current} "*" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Multiplication.left=current} "*" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//	NumberLiteral | "(" Addition ")";
		public ParserRule getRule() { return rule; }

		//NumberLiteral | "(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }

		//"(" Addition ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_1_1() { return cAdditionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueINTAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTINTTerminalRuleCall_0_0 = (RuleCall)cValueINTAssignment_0.eContents().get(0);
		private final Assignment cValueIDAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueIDQualifiedNameParserRuleCall_1_0 = (RuleCall)cValueIDAssignment_1.eContents().get(0);
		private final Assignment cRefValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cRefValueExpressionCrossReference_2_0 = (CrossReference)cRefValueAssignment_2.eContents().get(0);
		private final RuleCall cRefValueExpressionIDTerminalRuleCall_2_0_1 = (RuleCall)cRefValueExpressionCrossReference_2_0.eContents().get(1);
		
		//NumberLiteral:
		//	valueINT=INT | valueID=QualifiedName | refValue=[Expression];
		public ParserRule getRule() { return rule; }

		//valueINT=INT | valueID=QualifiedName | refValue=[Expression]
		public Alternatives getAlternatives() { return cAlternatives; }

		//valueINT=INT
		public Assignment getValueINTAssignment_0() { return cValueINTAssignment_0; }

		//INT
		public RuleCall getValueINTINTTerminalRuleCall_0_0() { return cValueINTINTTerminalRuleCall_0_0; }

		//valueID=QualifiedName
		public Assignment getValueIDAssignment_1() { return cValueIDAssignment_1; }

		//QualifiedName
		public RuleCall getValueIDQualifiedNameParserRuleCall_1_0() { return cValueIDQualifiedNameParserRuleCall_1_0; }

		//refValue=[Expression]
		public Assignment getRefValueAssignment_2() { return cRefValueAssignment_2; }

		//[Expression]
		public CrossReference getRefValueExpressionCrossReference_2_0() { return cRefValueExpressionCrossReference_2_0; }

		//ID
		public RuleCall getRefValueExpressionIDTerminalRuleCall_2_0_1() { return cRefValueExpressionIDTerminalRuleCall_2_0_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////end machineConstructor  														---------
		////action  																		----+----
		//Action:
		//	ActionBlock | ActionStatement;
		public ParserRule getRule() { return rule; }

		//ActionBlock | ActionStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActionBlock
		public RuleCall getActionBlockParserRuleCall_0() { return cActionBlockParserRuleCall_0; }

		//ActionStatement
		public RuleCall getActionStatementParserRuleCall_1() { return cActionStatementParserRuleCall_1; }
	}

	public class ActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionBlock");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////to complet
		//ActionBlock:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class ActionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionStatement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////to complet
		//ActionStatement:
		//	name=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING
		public Assignment getNameAssignment() { return cNameAssignment; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0() { return cNameSTRINGTerminalRuleCall_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromTargetTrnParserRuleCall_1_0 = (RuleCall)cFromAssignment_1.eContents().get(0);
		private final Assignment cAtAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAtAssingTransitionTerminalRuleCall_2_0 = (RuleCall)cAtAssignment_2.eContents().get(0);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToTargetTrnParserRuleCall_3_0 = (RuleCall)cToAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////end actions  																	---------
		////transition  																	----+----
		////to complet, one case
		//Transition:
		//	"transition" from=TargetTrn at=AssingTransition to=TargetTrn ";";
		public ParserRule getRule() { return rule; }

		//"transition" from=TargetTrn at=AssingTransition to=TargetTrn ";"
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//from=TargetTrn
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }

		//TargetTrn
		public RuleCall getFromTargetTrnParserRuleCall_1_0() { return cFromTargetTrnParserRuleCall_1_0; }

		//at=AssingTransition
		public Assignment getAtAssignment_2() { return cAtAssignment_2; }

		//AssingTransition
		public RuleCall getAtAssingTransitionTerminalRuleCall_2_0() { return cAtAssingTransitionTerminalRuleCall_2_0; }

		//to=TargetTrn
		public Assignment getToAssignment_3() { return cToAssignment_3; }

		//TargetTrn
		public RuleCall getToTargetTrnParserRuleCall_3_0() { return cToTargetTrnParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TargetTrnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetTrn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFromToAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFromToSingleStateParserRuleCall_0_0 = (RuleCall)cFromToAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFromToListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFromToListListStatesParserRuleCall_1_1_0 = (RuleCall)cFromToListAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//TargetTrn:
		//	fromTo=SingleState | "[" fromToList=ListStates "]";
		public ParserRule getRule() { return rule; }

		//fromTo=SingleState | "[" fromToList=ListStates "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//fromTo=SingleState
		public Assignment getFromToAssignment_0() { return cFromToAssignment_0; }

		//SingleState
		public RuleCall getFromToSingleStateParserRuleCall_0_0() { return cFromToSingleStateParserRuleCall_0_0; }

		//"[" fromToList=ListStates "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//fromToList=ListStates
		public Assignment getFromToListAssignment_1_1() { return cFromToListAssignment_1_1; }

		//ListStates
		public RuleCall getFromToListListStatesParserRuleCall_1_1_0() { return cFromToListListStatesParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class SingleStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleState");
		private final Assignment cFromToAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFromToStatesCrossReference_0 = (CrossReference)cFromToAssignment.eContents().get(0);
		private final RuleCall cFromToStatesQualifiedNameParserRuleCall_0_1 = (RuleCall)cFromToStatesCrossReference_0.eContents().get(1);
		
		//SingleState:
		//	fromTo=[States|QualifiedName];
		public ParserRule getRule() { return rule; }

		//fromTo=[States|QualifiedName]
		public Assignment getFromToAssignment() { return cFromToAssignment; }

		//[States|QualifiedName]
		public CrossReference getFromToStatesCrossReference_0() { return cFromToStatesCrossReference_0; }

		//QualifiedName
		public RuleCall getFromToStatesQualifiedNameParserRuleCall_0_1() { return cFromToStatesQualifiedNameParserRuleCall_0_1; }
	}

	public class ListStatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListStates");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cListAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cListSingleStateParserRuleCall_0_0_0 = (RuleCall)cListAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListSingleStateParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		
		//ListStates:
		//	(list+=SingleState ",")+ list+=SingleState;
		public ParserRule getRule() { return rule; }

		//(list+=SingleState ",")+ list+=SingleState
		public Group getGroup() { return cGroup; }

		//(list+=SingleState ",")+
		public Group getGroup_0() { return cGroup_0; }

		//list+=SingleState
		public Assignment getListAssignment_0_0() { return cListAssignment_0_0; }

		//SingleState
		public RuleCall getListSingleStateParserRuleCall_0_0_0() { return cListSingleStateParserRuleCall_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//list+=SingleState
		public Assignment getListAssignment_1() { return cListAssignment_1; }

		//SingleState
		public RuleCall getListSingleStateParserRuleCall_1_0() { return cListSingleStateParserRuleCall_1_0; }
	}

	public class HostBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HostBlock");
		private final Assignment cTextAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTextPlainTextTerminalRuleCall_0 = (RuleCall)cTextAssignment.eContents().get(0);
		
		//// (AT1 | AT2);
		/// *
		//AssingTransition:
		//'-' 
		//(Ttype1 | Ttype2 | Ttype3);
		//
		//Ttype1:
		//'->';
		//terminal Ttype2:
		//'[' -> '] /' -> '->';
		//terminal Ttype3:
		// ID '?' ID '/' -> '->';
		// * ///end transition  																---------
		////hostBlock  																	----+----
		//HostBlock:
		//	text=plainText;
		public ParserRule getRule() { return rule; }

		//text=plainText
		public Assignment getTextAssignment() { return cTextAssignment; }

		//plainText
		public RuleCall getTextPlainTextTerminalRuleCall_0() { return cTextPlainTextTerminalRuleCall_0; }
	}

	public class SubMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMachineModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMachineModifierMachineModifierParserRuleCall_1_0 = (RuleCall)cMachineModifierAssignment_1.eContents().get(0);
		private final Assignment cMachineBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMachineBodyMachineBodyParserRuleCall_2_0 = (RuleCall)cMachineBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////end hostBlock  																---------
		////submachine  																	----+----
		//SubMachine:
		//	"{" machineModifier=MachineModifier? //(innerMachine=InnerMachine | externalMachine=ExternalMachine | reflectMachine=ReflectMachine |variableMachine=VariableMachine)
		//	MachineBody=MachineBody "}";
		public ParserRule getRule() { return rule; }

		//"{" machineModifier=MachineModifier? //(innerMachine=InnerMachine | externalMachine=ExternalMachine | reflectMachine=ReflectMachine |variableMachine=VariableMachine)
		//MachineBody=MachineBody "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//machineModifier=MachineModifier?
		public Assignment getMachineModifierAssignment_1() { return cMachineModifierAssignment_1; }

		//MachineModifier
		public RuleCall getMachineModifierMachineModifierParserRuleCall_1_0() { return cMachineModifierMachineModifierParserRuleCall_1_0; }

		//MachineBody=MachineBody
		public Assignment getMachineBodyAssignment_2() { return cMachineBodyAssignment_2; }

		//MachineBody
		public RuleCall getMachineBodyMachineBodyParserRuleCall_2_0() { return cMachineBodyMachineBodyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class InnerMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InnerMachine");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////to complet
		//InnerMachine:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ExternalMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalMachine");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ExternalMachine:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ReflectMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReflectMachine");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ReflectMachine:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class VariableMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableMachine");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////end submachine  																--------- VariableMachine:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		////end submachine  																--------- name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		////end submachine  																--------- ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	public class AccessModifiersElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AccessModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPRIVATEPrivateKeyword_0_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPUBLICPublicKeyword_1_0 = (Keyword)cPUBLICEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDProtectedKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFINALFinalKeyword_3_0 = (Keyword)cFINALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cABSTRACTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cABSTRACTAbstractKeyword_4_0 = (Keyword)cABSTRACTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum AccessModifiers:
		//	PRIVATE="private" | PUBLIC="public" | PROTECTED="protected" | FINAL="final" | ABSTRACT="abstract";
		public EnumRule getRule() { return rule; }

		//PRIVATE="private" | PUBLIC="public" | PROTECTED="protected" | FINAL="final" | ABSTRACT="abstract"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_0() { return cPRIVATEEnumLiteralDeclaration_0; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_0_0() { return cPRIVATEPrivateKeyword_0_0; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_1() { return cPUBLICEnumLiteralDeclaration_1; }

		//"public"
		public Keyword getPUBLICPublicKeyword_1_0() { return cPUBLICPublicKeyword_1_0; }

		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_2_0() { return cPROTECTEDProtectedKeyword_2_0; }

		//FINAL="final"
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_3() { return cFINALEnumLiteralDeclaration_3; }

		//"final"
		public Keyword getFINALFinalKeyword_3_0() { return cFINALFinalKeyword_3_0; }

		//ABSTRACT="abstract"
		public EnumLiteralDeclaration getABSTRACTEnumLiteralDeclaration_4() { return cABSTRACTEnumLiteralDeclaration_4; }

		//"abstract"
		public Keyword getABSTRACTAbstractKeyword_4_0() { return cABSTRACTAbstractKeyword_4_0; }
	}

	public class StateModifiersElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINITIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINITIALInitialKeyword_0_0 = (Keyword)cINITIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNONTERMINALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNONTERMINALNonterminalKeyword_1_0 = (Keyword)cNONTERMINALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONCURRENTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONCURRENTConcurentKeyword_2_0 = (Keyword)cCONCURRENTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StateModifiers:
		//	INITIAL="initial" | NONTERMINAL="nonterminal" | CONCURRENT="concurent";
		public EnumRule getRule() { return rule; }

		//INITIAL="initial" | NONTERMINAL="nonterminal" | CONCURRENT="concurent"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INITIAL="initial"
		public EnumLiteralDeclaration getINITIALEnumLiteralDeclaration_0() { return cINITIALEnumLiteralDeclaration_0; }

		//"initial"
		public Keyword getINITIALInitialKeyword_0_0() { return cINITIALInitialKeyword_0_0; }

		//NONTERMINAL="nonterminal"
		public EnumLiteralDeclaration getNONTERMINALEnumLiteralDeclaration_1() { return cNONTERMINALEnumLiteralDeclaration_1; }

		//"nonterminal"
		public Keyword getNONTERMINALNonterminalKeyword_1_0() { return cNONTERMINALNonterminalKeyword_1_0; }

		//CONCURRENT="concurent"
		public EnumLiteralDeclaration getCONCURRENTEnumLiteralDeclaration_2() { return cCONCURRENTEnumLiteralDeclaration_2; }

		//"concurent"
		public Keyword getCONCURRENTConcurentKeyword_2_0() { return cCONCURRENTConcurentKeyword_2_0; }
	}
	
	private RootElements pRoot;
	private PackageElements pPackage;
	private ImportsElements pImports;
	private MachineElements pMachine;
	private UnoElements pUno;
	private DosElements pDos;
	private MachineBodyElements pMachineBody;
	private AccessAndMachineModifiersElements pAccessAndMachineModifiers;
	private AccessModifiersElements unknownRuleAccessModifiers;
	private MachineModifierElements pMachineModifier;
	private StatesElements pStates;
	private StateModifiersElements unknownRuleStateModifiers;
	private EntryElements pEntry;
	private ExitElements pExit;
	private MachineConstructorElements pMachineConstructor;
	private MachineInvocationElements pMachineInvocation;
	private ParamsDeclarationElements pParamsDeclaration;
	private ParamsInvocationElements pParamsInvocation;
	private ExpressionElements pExpression;
	private AssingExpressionElements pAssingExpression;
	private AdmiredExpressionElements pAdmiredExpression;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PrimaryElements pPrimary;
	private NumberLiteralElements pNumberLiteral;
	private QualifiedNameElements pQualifiedName;
	private ActionElements pAction;
	private ActionBlockElements pActionBlock;
	private ActionStatementElements pActionStatement;
	private TransitionElements pTransition;
	private TargetTrnElements pTargetTrn;
	private SingleStateElements pSingleState;
	private ListStatesElements pListStates;
	private TerminalRule tAssingTransition;
	private HostBlockElements pHostBlock;
	private TerminalRule tPlainText;
	private SubMachineElements pSubMachine;
	private InnerMachineElements pInnerMachine;
	private ExternalMachineElements pExternalMachine;
	private ReflectMachineElements pReflectMachine;
	private VariableMachineElements pVariableMachine;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslEChartsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root: //The first is to write the package and then define a machine
	//	package=Package imports+=Imports* machine+=Machine+;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Package:
	//	"package" name=ID ";";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Imports:
	//	"import" name=QualifiedName ".*"? ";";
	public ImportsElements getImportsAccess() {
		return (pImports != null) ? pImports : (pImports = new ImportsElements());
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	////top level machine definition  												----+----
	//Machine:
	//	accessAndMachineModifier=AccessAndMachineModifiers "machine" name=ID "{" //machine body
	//	machineBody=MachineBody "}";
	public MachineElements getMachineAccess() {
		return (pMachine != null) ? pMachine : (pMachine = new MachineElements());
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}

	////Various statements inside a machine body:
	////state definition, transition definition, host language
	//// block, or machine constructor
	/// *
	//MachineBody:
	//
	//(hostBlock+=HostBlock)*
	//(machineConstructor+=MachineConstructor)? 
	//(states+=States)+ 
	//(transition+=Transition)*;
	//
	// * ///to allow the writting one or more of hostBlock,MachineConstructor,States or Transitions, regardless of the order between each other.
	////when Uno had been resolved we can added other rules like Dos.
	//Uno returns MachineBody:
	//	Dos ({Uno.left=current} right=Dos)*;
	public UnoElements getUnoAccess() {
		return (pUno != null) ? pUno : (pUno = new UnoElements());
	}
	
	public ParserRule getUnoRule() {
		return getUnoAccess().getRule();
	}

	//Dos returns MachineBody:
	//	hostBlock=HostBlock | machineConstructor=MachineConstructor | states=States | transition=Transition;
	public DosElements getDosAccess() {
		return (pDos != null) ? pDos : (pDos = new DosElements());
	}
	
	public ParserRule getDosRule() {
		return getDosAccess().getRule();
	}

	//MachineBody:
	//	Uno;
	public MachineBodyElements getMachineBodyAccess() {
		return (pMachineBody != null) ? pMachineBody : (pMachineBody = new MachineBodyElements());
	}
	
	public ParserRule getMachineBodyRule() {
		return getMachineBodyAccess().getRule();
	}

	//AccessAndMachineModifiers:
	//	accessModifier=AccessModifiers machineModifier=MachineModifier?;
	public AccessAndMachineModifiersElements getAccessAndMachineModifiersAccess() {
		return (pAccessAndMachineModifiers != null) ? pAccessAndMachineModifiers : (pAccessAndMachineModifiers = new AccessAndMachineModifiersElements());
	}
	
	public ParserRule getAccessAndMachineModifiersRule() {
		return getAccessAndMachineModifiersAccess().getRule();
	}

	//enum AccessModifiers:
	//	PRIVATE="private" | PUBLIC="public" | PROTECTED="protected" | FINAL="final" | ABSTRACT="abstract";
	public AccessModifiersElements getAccessModifiersAccess() {
		return (unknownRuleAccessModifiers != null) ? unknownRuleAccessModifiers : (unknownRuleAccessModifiers = new AccessModifiersElements());
	}
	
	public EnumRule getAccessModifiersRule() {
		return getAccessModifiersAccess().getRule();
	}

	//MachineModifier:
	//	concurrent="concurrent";
	public MachineModifierElements getMachineModifierAccess() {
		return (pMachineModifier != null) ? pMachineModifier : (pMachineModifier = new MachineModifierElements());
	}
	
	public ParserRule getMachineModifierRule() {
		return getMachineModifierAccess().getRule();
	}

	////end top level machine definition  											---------
	////states  																		----+----
	//States:
	//	stateMods=StateModifiers? "state" name=QualifiedName en=Entry? ex=Exit? (":" (submachine=SubMachine |
	//	machineInvocations=MachineInvocation) //(':' submachine=SubMachine)?; 
	//	//((':' submachine=SubMachine) | ';');
	//	| ";");
	public StatesElements getStatesAccess() {
		return (pStates != null) ? pStates : (pStates = new StatesElements());
	}
	
	public ParserRule getStatesRule() {
		return getStatesAccess().getRule();
	}

	//enum StateModifiers:
	//	INITIAL="initial" | NONTERMINAL="nonterminal" | CONCURRENT="concurent";
	public StateModifiersElements getStateModifiersAccess() {
		return (unknownRuleStateModifiers != null) ? unknownRuleStateModifiers : (unknownRuleStateModifiers = new StateModifiersElements());
	}
	
	public EnumRule getStateModifiersRule() {
		return getStateModifiersAccess().getRule();
	}

	//Entry:
	//	"entry" a=Action;
	public EntryElements getEntryAccess() {
		return (pEntry != null) ? pEntry : (pEntry = new EntryElements());
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//Exit:
	//	"exit" a=Action;
	public ExitElements getExitAccess() {
		return (pExit != null) ? pExit : (pExit = new ExitElements());
	}
	
	public ParserRule getExitRule() {
		return getExitAccess().getRule();
	}

	////end states  																	---------
	////machineConstructors  															----+----
	////public...
	//MachineConstructor:
	//	"public" machineName=[Machine] "(" paramsMachine=paramsDeclaration ")" "{" //expressions
	//	//(expr+=(AdmiredExpression | AssingExpression) ';')+
	//	(expr+=Expression ("(" STRING ")" | "()")? ";")+ "}";
	public MachineConstructorElements getMachineConstructorAccess() {
		return (pMachineConstructor != null) ? pMachineConstructor : (pMachineConstructor = new MachineConstructorElements());
	}
	
	public ParserRule getMachineConstructorRule() {
		return getMachineConstructorAccess().getRule();
	}

	////params should be a cross reference, but I Don't know how to parse it.
	//MachineInvocation:
	//	{MachineInvocation} ID ("(" paramsInvocation ")" | "()") ";";
	public MachineInvocationElements getMachineInvocationAccess() {
		return (pMachineInvocation != null) ? pMachineInvocation : (pMachineInvocation = new MachineInvocationElements());
	}
	
	public ParserRule getMachineInvocationRule() {
		return getMachineInvocationAccess().getRule();
	}

	//paramsDeclaration:
	//	paramtype+=ID name+=ID | (paramtype+=ID name+=ID ",")+ paramtype+=ID name+=ID;
	public ParamsDeclarationElements getParamsDeclarationAccess() {
		return (pParamsDeclaration != null) ? pParamsDeclaration : (pParamsDeclaration = new ParamsDeclarationElements());
	}
	
	public ParserRule getParamsDeclarationRule() {
		return getParamsDeclarationAccess().getRule();
	}

	//paramsInvocation returns ecore::EString:
	//	ID | (ID ",")+ ID;
	public ParamsInvocationElements getParamsInvocationAccess() {
		return (pParamsInvocation != null) ? pParamsInvocation : (pParamsInvocation = new ParamsInvocationElements());
	}
	
	public ParserRule getParamsInvocationRule() {
		return getParamsInvocationAccess().getRule();
	}

	////expressions
	//Expression:
	//	"this."? name=ID second=(AssingExpression | AdmiredExpression);
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////second=Addition;
	//AssingExpression:
	//	"=" Addition;
	public AssingExpressionElements getAssingExpressionAccess() {
		return (pAssingExpression != null) ? pAssingExpression : (pAssingExpression = new AssingExpressionElements());
	}
	
	public ParserRule getAssingExpressionRule() {
		return getAssingExpressionAccess().getRule();
	}

	//AdmiredExpression returns Expression:
	//	"!" Addition;
	public AdmiredExpressionElements getAdmiredExpressionAccess() {
		return (pAdmiredExpression != null) ? pAdmiredExpression : (pAdmiredExpression = new AdmiredExpressionElements());
	}
	
	public ParserRule getAdmiredExpressionRule() {
		return getAdmiredExpressionAccess().getRule();
	}

	//Addition returns Expression: //(alreadyExistValue=[Expression] | newValueId=ID | newValueInt=INT);
	//	Multiplication ({Addtion.left=current} "+" right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Primary ({Multiplication.left=current} "*" right=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Primary returns Expression:
	//	NumberLiteral | "(" Addition ")";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//NumberLiteral:
	//	valueINT=INT | valueID=QualifiedName | refValue=[Expression];
	public NumberLiteralElements getNumberLiteralAccess() {
		return (pNumberLiteral != null) ? pNumberLiteral : (pNumberLiteral = new NumberLiteralElements());
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	////end machineConstructor  														---------
	////action  																		----+----
	//Action:
	//	ActionBlock | ActionStatement;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	////to complet
	//ActionBlock:
	//	name=STRING;
	public ActionBlockElements getActionBlockAccess() {
		return (pActionBlock != null) ? pActionBlock : (pActionBlock = new ActionBlockElements());
	}
	
	public ParserRule getActionBlockRule() {
		return getActionBlockAccess().getRule();
	}

	////to complet
	//ActionStatement:
	//	name=STRING;
	public ActionStatementElements getActionStatementAccess() {
		return (pActionStatement != null) ? pActionStatement : (pActionStatement = new ActionStatementElements());
	}
	
	public ParserRule getActionStatementRule() {
		return getActionStatementAccess().getRule();
	}

	////end actions  																	---------
	////transition  																	----+----
	////to complet, one case
	//Transition:
	//	"transition" from=TargetTrn at=AssingTransition to=TargetTrn ";";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//TargetTrn:
	//	fromTo=SingleState | "[" fromToList=ListStates "]";
	public TargetTrnElements getTargetTrnAccess() {
		return (pTargetTrn != null) ? pTargetTrn : (pTargetTrn = new TargetTrnElements());
	}
	
	public ParserRule getTargetTrnRule() {
		return getTargetTrnAccess().getRule();
	}

	//SingleState:
	//	fromTo=[States|QualifiedName];
	public SingleStateElements getSingleStateAccess() {
		return (pSingleState != null) ? pSingleState : (pSingleState = new SingleStateElements());
	}
	
	public ParserRule getSingleStateRule() {
		return getSingleStateAccess().getRule();
	}

	//ListStates:
	//	(list+=SingleState ",")+ list+=SingleState;
	public ListStatesElements getListStatesAccess() {
		return (pListStates != null) ? pListStates : (pListStates = new ListStatesElements());
	}
	
	public ParserRule getListStatesRule() {
		return getListStatesAccess().getRule();
	}

	////this not works.
	//terminal AssingTransition:
	//	"-->" | "- ["->"] /"->"->" | "-" ID "?" ID "/"->"->";
	public TerminalRule getAssingTransitionRule() {
		return (tAssingTransition != null) ? tAssingTransition : (tAssingTransition = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AssingTransition"));
	} 

	//// (AT1 | AT2);
	/// *
	//AssingTransition:
	//'-' 
	//(Ttype1 | Ttype2 | Ttype3);
	//
	//Ttype1:
	//'->';
	//terminal Ttype2:
	//'[' -> '] /' -> '->';
	//terminal Ttype3:
	// ID '?' ID '/' -> '->';
	// * ///end transition  																---------
	////hostBlock  																	----+----
	//HostBlock:
	//	text=plainText;
	public HostBlockElements getHostBlockAccess() {
		return (pHostBlock != null) ? pHostBlock : (pHostBlock = new HostBlockElements());
	}
	
	public ParserRule getHostBlockRule() {
		return getHostBlockAccess().getRule();
	}

	//terminal plainText:
	//	"<* "->"*>";
	public TerminalRule getPlainTextRule() {
		return (tPlainText != null) ? tPlainText : (tPlainText = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "plainText"));
	} 

	////end hostBlock  																---------
	////submachine  																	----+----
	//SubMachine:
	//	"{" machineModifier=MachineModifier? //(innerMachine=InnerMachine | externalMachine=ExternalMachine | reflectMachine=ReflectMachine |variableMachine=VariableMachine)
	//	MachineBody=MachineBody "}";
	public SubMachineElements getSubMachineAccess() {
		return (pSubMachine != null) ? pSubMachine : (pSubMachine = new SubMachineElements());
	}
	
	public ParserRule getSubMachineRule() {
		return getSubMachineAccess().getRule();
	}

	////to complet
	//InnerMachine:
	//	name=ID;
	public InnerMachineElements getInnerMachineAccess() {
		return (pInnerMachine != null) ? pInnerMachine : (pInnerMachine = new InnerMachineElements());
	}
	
	public ParserRule getInnerMachineRule() {
		return getInnerMachineAccess().getRule();
	}

	//ExternalMachine:
	//	name=ID;
	public ExternalMachineElements getExternalMachineAccess() {
		return (pExternalMachine != null) ? pExternalMachine : (pExternalMachine = new ExternalMachineElements());
	}
	
	public ParserRule getExternalMachineRule() {
		return getExternalMachineAccess().getRule();
	}

	//ReflectMachine:
	//	name=ID;
	public ReflectMachineElements getReflectMachineAccess() {
		return (pReflectMachine != null) ? pReflectMachine : (pReflectMachine = new ReflectMachineElements());
	}
	
	public ParserRule getReflectMachineRule() {
		return getReflectMachineAccess().getRule();
	}

	////end submachine  																--------- VariableMachine:
	//	name=ID;
	public VariableMachineElements getVariableMachineAccess() {
		return (pVariableMachine != null) ? pVariableMachine : (pVariableMachine = new VariableMachineElements());
	}
	
	public ParserRule getVariableMachineRule() {
		return getVariableMachineAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
