/*
 * generated by Xtext
 */
package es.upm.gsi.ECharts.formatting;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

/**
 * Give a format to our text. 
 * 		No spaces after a name of State and a colon.
 * 		\n after each rule,
 * 		\n after each semi-colon,
 * 		Correct indentation based on {,},
 */
public class DslEChartsFormatter extends AbstractDeclarativeFormatter {
	
	/**
	 * Give a format to our text. 
	 * 		No spaces after a name of State and a colon.
	 * 		\n after each rule
	 * 		\n after each semi-colon
	 * 		Correct indentation based on {,}
	 * 		No spaces around brackets ( );
	 * 		
	 * @param c - an object which contains useful methods for changing our text 
	 */
	@Override
	protected void configureFormatting(FormattingConfig c) {
		
		es.upm.gsi.ECharts.services.DslEChartsGrammarAccess f = (es.upm.gsi.ECharts.services.DslEChartsGrammarAccess) getGrammarAccess();

		c.setAutoLinewrap(120);
		
		
		
		//c.setLinewrap(1, 2, 3).around(f.getAbstractElementRule());
		//c.setLinewrap(1, 2, 3).around(f.getPackageDeclarationRule());
		//c.setLinewrap(1, 1, 2).around(f.getFeatureRule());
		//c.setNoSpace().before(f.getTypeRefAccess().getMultiAsteriskKeyword_1_0());
		///c.setLinewrap(1,2,2).after(f.getPackageRule());
		///c.setLinewrap(1,2,2).before(f.getMachineRule());
		//c.setLinewrap(1).after(f.getMachineAccess().getLeftCurlyBracketKeyword_3());
		
		
		//for (Keyword colon : f.findKeywords(":")) {
		//	c.setNoSpace().before(colon);
		//}
		
		//c.setNoSpace().before(f.getStatesAccess().getColonKeyword_5_0());
		c.setNoSpace().before(f.getStatesAccess().getColonKeyword_5_0_0());
		
		// \n after each rule
		c.setLinewrap(1, 2, 3).after(f.getPackageRule());
		c.setLinewrap(1, 2, 3).after(f.getImportsRule());
		c.setLinewrap(1, 2, 3).after(f.getMachineRule());
		
		// \n after semicolon
		for (Keyword semicolon : f.findKeywords(";")) {
			c.setNoSpace().before(semicolon);
			c.setLinewrap().after(semicolon);
		}
		
		//no spaces between ( and )
		List<Pair<Keyword,Keyword>> brackets = f.findKeywordPairs("(",")");
		for (Pair<Keyword, Keyword> pair : brackets) {
			
			c.setNoSpace().around(pair.getFirst());
			c.setNoSpace().around(pair.getSecond());	
		}
		//no space before () in a Machine invocation
		c.setNoSpace().before(f.getMachineInvocationAccess().getAlternatives_2());
		
		/*
		c.setSpace(" clap ").around(f.getMachineRule());
		System.out.println();
		System.out.println(f.getMachineRule().toString());
		System.out.println();
		System.out.println(f.getMachineAccess().toString());
		*/
		/*
		for (final Pair<Keyword, Keyword> pair : f.findKeywordPairs("{", "}")) { //$NON-NLS-1$ //$NON-NLS-2$
			// a space before the first '{'
			c.setLinewrap(1).after(pair.getFirst());
			//c.setSpace(" ").before(pair.getFirst()); //$NON-NLS-1$
			//c.setLinewrap(1).after(pair.getFirst());
			
			// indentation between
			c.setIndentation(pair.getFirst(), pair.getSecond());
			//c.setLinewrap(1).before(pair.getFirst());
			// and a linewrap before the last '{'
			c.setLinewrap(1).before(pair.getSecond());
			}
	*/		
		List<Pair<Keyword,Keyword>> pairs = f.findKeywordPairs("{","}");
		for (Pair<Keyword, Keyword> pair : pairs) {
			
			c.setLinewrap(1).after(pair.getFirst());
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setLinewrap(1).before(pair.getSecond());	
		}
		
		
		
		
		//c.setSpace(" m ").around(f.getMachineRule());
		//System.out.println("mio: " + f.getMachineModifierAccess());
		
		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());
		
	}
}