/*
* generated by Xtext
*/
grammar InternalDslECharts;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package es.upm.gsi.ECharts.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package es.upm.gsi.ECharts.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import es.upm.gsi.ECharts.services.DslEChartsGrammarAccess;

}

@parser::members {
 
 	private DslEChartsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DslEChartsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRoot
entryRuleRoot 
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootAccess().getGroup()); }
(rule__Root__Group__0)
{ after(grammarAccess.getRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage
entryRulePackage 
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageAccess().getGroup()); }
(rule__Package__Group__0)
{ after(grammarAccess.getPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImports
entryRuleImports 
:
{ before(grammarAccess.getImportsRule()); }
	 ruleImports
{ after(grammarAccess.getImportsRule()); } 
	 EOF 
;

// Rule Imports
ruleImports
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportsAccess().getGroup()); }
(rule__Imports__Group__0)
{ after(grammarAccess.getImportsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachine
entryRuleMachine 
:
{ before(grammarAccess.getMachineRule()); }
	 ruleMachine
{ after(grammarAccess.getMachineRule()); } 
	 EOF 
;

// Rule Machine
ruleMachine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineAccess().getGroup()); }
(rule__Machine__Group__0)
{ after(grammarAccess.getMachineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUno
entryRuleUno 
:
{ before(grammarAccess.getUnoRule()); }
	 ruleUno
{ after(grammarAccess.getUnoRule()); } 
	 EOF 
;

// Rule Uno
ruleUno
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnoAccess().getGroup()); }
(rule__Uno__Group__0)
{ after(grammarAccess.getUnoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDos
entryRuleDos 
:
{ before(grammarAccess.getDosRule()); }
	 ruleDos
{ after(grammarAccess.getDosRule()); } 
	 EOF 
;

// Rule Dos
ruleDos
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDosAccess().getAlternatives()); }
(rule__Dos__Alternatives)
{ after(grammarAccess.getDosAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachineBody
entryRuleMachineBody 
:
{ before(grammarAccess.getMachineBodyRule()); }
	 ruleMachineBody
{ after(grammarAccess.getMachineBodyRule()); } 
	 EOF 
;

// Rule MachineBody
ruleMachineBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineBodyAccess().getUnoParserRuleCall()); }
	ruleUno
{ after(grammarAccess.getMachineBodyAccess().getUnoParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAccessAndMachineModifiers
entryRuleAccessAndMachineModifiers 
:
{ before(grammarAccess.getAccessAndMachineModifiersRule()); }
	 ruleAccessAndMachineModifiers
{ after(grammarAccess.getAccessAndMachineModifiersRule()); } 
	 EOF 
;

// Rule AccessAndMachineModifiers
ruleAccessAndMachineModifiers
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAccessAndMachineModifiersAccess().getGroup()); }
(rule__AccessAndMachineModifiers__Group__0)
{ after(grammarAccess.getAccessAndMachineModifiersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachineModifier
entryRuleMachineModifier 
:
{ before(grammarAccess.getMachineModifierRule()); }
	 ruleMachineModifier
{ after(grammarAccess.getMachineModifierRule()); } 
	 EOF 
;

// Rule MachineModifier
ruleMachineModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineModifierAccess().getConcurrentAssignment()); }
(rule__MachineModifier__ConcurrentAssignment)
{ after(grammarAccess.getMachineModifierAccess().getConcurrentAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStates
entryRuleStates 
:
{ before(grammarAccess.getStatesRule()); }
	 ruleStates
{ after(grammarAccess.getStatesRule()); } 
	 EOF 
;

// Rule States
ruleStates
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatesAccess().getGroup()); }
(rule__States__Group__0)
{ after(grammarAccess.getStatesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntry
entryRuleEntry 
:
{ before(grammarAccess.getEntryRule()); }
	 ruleEntry
{ after(grammarAccess.getEntryRule()); } 
	 EOF 
;

// Rule Entry
ruleEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntryAccess().getGroup()); }
(rule__Entry__Group__0)
{ after(grammarAccess.getEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExit
entryRuleExit 
:
{ before(grammarAccess.getExitRule()); }
	 ruleExit
{ after(grammarAccess.getExitRule()); } 
	 EOF 
;

// Rule Exit
ruleExit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExitAccess().getGroup()); }
(rule__Exit__Group__0)
{ after(grammarAccess.getExitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachineConstructor
entryRuleMachineConstructor 
:
{ before(grammarAccess.getMachineConstructorRule()); }
	 ruleMachineConstructor
{ after(grammarAccess.getMachineConstructorRule()); } 
	 EOF 
;

// Rule MachineConstructor
ruleMachineConstructor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineConstructorAccess().getGroup()); }
(rule__MachineConstructor__Group__0)
{ after(grammarAccess.getMachineConstructorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMachineInvocation
entryRuleMachineInvocation 
:
{ before(grammarAccess.getMachineInvocationRule()); }
	 ruleMachineInvocation
{ after(grammarAccess.getMachineInvocationRule()); } 
	 EOF 
;

// Rule MachineInvocation
ruleMachineInvocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMachineInvocationAccess().getGroup()); }
(rule__MachineInvocation__Group__0)
{ after(grammarAccess.getMachineInvocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleparamsDeclaration
entryRuleparamsDeclaration 
:
{ before(grammarAccess.getParamsDeclarationRule()); }
	 ruleparamsDeclaration
{ after(grammarAccess.getParamsDeclarationRule()); } 
	 EOF 
;

// Rule paramsDeclaration
ruleparamsDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamsDeclarationAccess().getAlternatives()); }
(rule__ParamsDeclaration__Alternatives)
{ after(grammarAccess.getParamsDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleparamsInvocation
entryRuleparamsInvocation 
:
{ before(grammarAccess.getParamsInvocationRule()); }
	 ruleparamsInvocation
{ after(grammarAccess.getParamsInvocationRule()); } 
	 EOF 
;

// Rule paramsInvocation
ruleparamsInvocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamsInvocationAccess().getAlternatives()); }
(rule__ParamsInvocation__Alternatives)
{ after(grammarAccess.getParamsInvocationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssingExpression
entryRuleAssingExpression 
:
{ before(grammarAccess.getAssingExpressionRule()); }
	 ruleAssingExpression
{ after(grammarAccess.getAssingExpressionRule()); } 
	 EOF 
;

// Rule AssingExpression
ruleAssingExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssingExpressionAccess().getGroup()); }
(rule__AssingExpression__Group__0)
{ after(grammarAccess.getAssingExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdmiredExpression
entryRuleAdmiredExpression 
:
{ before(grammarAccess.getAdmiredExpressionRule()); }
	 ruleAdmiredExpression
{ after(grammarAccess.getAdmiredExpressionRule()); } 
	 EOF 
;

// Rule AdmiredExpression
ruleAdmiredExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdmiredExpressionAccess().getGroup()); }
(rule__AdmiredExpression__Group__0)
{ after(grammarAccess.getAdmiredExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
(rule__NumberLiteral__Alternatives)
{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAction
entryRuleAction 
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionBlock
entryRuleActionBlock 
:
{ before(grammarAccess.getActionBlockRule()); }
	 ruleActionBlock
{ after(grammarAccess.getActionBlockRule()); } 
	 EOF 
;

// Rule ActionBlock
ruleActionBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionBlockAccess().getNameAssignment()); }
(rule__ActionBlock__NameAssignment)
{ after(grammarAccess.getActionBlockAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionStatement
entryRuleActionStatement 
:
{ before(grammarAccess.getActionStatementRule()); }
	 ruleActionStatement
{ after(grammarAccess.getActionStatementRule()); } 
	 EOF 
;

// Rule ActionStatement
ruleActionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionStatementAccess().getNameAssignment()); }
(rule__ActionStatement__NameAssignment)
{ after(grammarAccess.getActionStatementAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTargetTrn
entryRuleTargetTrn 
:
{ before(grammarAccess.getTargetTrnRule()); }
	 ruleTargetTrn
{ after(grammarAccess.getTargetTrnRule()); } 
	 EOF 
;

// Rule TargetTrn
ruleTargetTrn
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetTrnAccess().getAlternatives()); }
(rule__TargetTrn__Alternatives)
{ after(grammarAccess.getTargetTrnAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleState
entryRuleSingleState 
:
{ before(grammarAccess.getSingleStateRule()); }
	 ruleSingleState
{ after(grammarAccess.getSingleStateRule()); } 
	 EOF 
;

// Rule SingleState
ruleSingleState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleStateAccess().getFromToAssignment()); }
(rule__SingleState__FromToAssignment)
{ after(grammarAccess.getSingleStateAccess().getFromToAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListStates
entryRuleListStates 
:
{ before(grammarAccess.getListStatesRule()); }
	 ruleListStates
{ after(grammarAccess.getListStatesRule()); } 
	 EOF 
;

// Rule ListStates
ruleListStates
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListStatesAccess().getGroup()); }
(rule__ListStates__Group__0)
{ after(grammarAccess.getListStatesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHostBlock
entryRuleHostBlock 
:
{ before(grammarAccess.getHostBlockRule()); }
	 ruleHostBlock
{ after(grammarAccess.getHostBlockRule()); } 
	 EOF 
;

// Rule HostBlock
ruleHostBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHostBlockAccess().getTextAssignment()); }
(rule__HostBlock__TextAssignment)
{ after(grammarAccess.getHostBlockAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSubMachine
entryRuleSubMachine 
:
{ before(grammarAccess.getSubMachineRule()); }
	 ruleSubMachine
{ after(grammarAccess.getSubMachineRule()); } 
	 EOF 
;

// Rule SubMachine
ruleSubMachine
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubMachineAccess().getGroup()); }
(rule__SubMachine__Group__0)
{ after(grammarAccess.getSubMachineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}












// Rule AccessModifiers
ruleAccessModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessModifiersAccess().getAlternatives()); }
(rule__AccessModifiers__Alternatives)
{ after(grammarAccess.getAccessModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule StateModifiers
ruleStateModifiers
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateModifiersAccess().getAlternatives()); }
(rule__StateModifiers__Alternatives)
{ after(grammarAccess.getStateModifiersAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Dos__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDosAccess().getHostBlockAssignment_0()); }
(rule__Dos__HostBlockAssignment_0)
{ after(grammarAccess.getDosAccess().getHostBlockAssignment_0()); }
)

    |(
{ before(grammarAccess.getDosAccess().getMachineConstructorAssignment_1()); }
(rule__Dos__MachineConstructorAssignment_1)
{ after(grammarAccess.getDosAccess().getMachineConstructorAssignment_1()); }
)

    |(
{ before(grammarAccess.getDosAccess().getStatesAssignment_2()); }
(rule__Dos__StatesAssignment_2)
{ after(grammarAccess.getDosAccess().getStatesAssignment_2()); }
)

    |(
{ before(grammarAccess.getDosAccess().getTransitionAssignment_3()); }
(rule__Dos__TransitionAssignment_3)
{ after(grammarAccess.getDosAccess().getTransitionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getGroup_5_0()); }
(rule__States__Group_5_0__0)
{ after(grammarAccess.getStatesAccess().getGroup_5_0()); }
)

    |(
{ before(grammarAccess.getStatesAccess().getSemicolonKeyword_5_1()); }

	';' 

{ after(grammarAccess.getStatesAccess().getSemicolonKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__Alternatives_5_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getSubmachineAssignment_5_0_1_0()); }
(rule__States__SubmachineAssignment_5_0_1_0)
{ after(grammarAccess.getStatesAccess().getSubmachineAssignment_5_0_1_0()); }
)

    |(
{ before(grammarAccess.getStatesAccess().getMachineInvocationsAssignment_5_0_1_1()); }
(rule__States__MachineInvocationsAssignment_5_0_1_1)
{ after(grammarAccess.getStatesAccess().getMachineInvocationsAssignment_5_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Alternatives_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getGroup_6_1_0()); }
(rule__MachineConstructor__Group_6_1_0__0)
{ after(grammarAccess.getMachineConstructorAccess().getGroup_6_1_0()); }
)

    |(
{ before(grammarAccess.getMachineConstructorAccess().getLeftParenthesisRightParenthesisKeyword_6_1_1()); }

	'()' 

{ after(grammarAccess.getMachineConstructorAccess().getLeftParenthesisRightParenthesisKeyword_6_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getGroup_2_0()); }
(rule__MachineInvocation__Group_2_0__0)
{ after(grammarAccess.getMachineInvocationAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getMachineInvocationAccess().getLeftParenthesisRightParenthesisKeyword_2_1()); }

	'()' 

{ after(grammarAccess.getMachineInvocationAccess().getLeftParenthesisRightParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getGroup_0()); }
(rule__ParamsDeclaration__Group_0__0)
{ after(grammarAccess.getParamsDeclarationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getParamsDeclarationAccess().getGroup_1()); }
(rule__ParamsDeclaration__Group_1__0)
{ after(grammarAccess.getParamsDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsInvocation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParamsInvocationAccess().getGroup_1()); }
(rule__ParamsInvocation__Group_1__0)
{ after(grammarAccess.getParamsInvocationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__SecondAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getSecondAssingExpressionParserRuleCall_2_0_0()); }
	ruleAssingExpression
{ after(grammarAccess.getExpressionAccess().getSecondAssingExpressionParserRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getSecondAdmiredExpressionParserRuleCall_2_0_1()); }
	ruleAdmiredExpression
{ after(grammarAccess.getExpressionAccess().getSecondAdmiredExpressionParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
{ after(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
(rule__Primary__Group_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueINTAssignment_0()); }
(rule__NumberLiteral__ValueINTAssignment_0)
{ after(grammarAccess.getNumberLiteralAccess().getValueINTAssignment_0()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getValueIDAssignment_1()); }
(rule__NumberLiteral__ValueIDAssignment_1)
{ after(grammarAccess.getNumberLiteralAccess().getValueIDAssignment_1()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getRefValueAssignment_2()); }
(rule__NumberLiteral__RefValueAssignment_2)
{ after(grammarAccess.getNumberLiteralAccess().getRefValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getActionBlockParserRuleCall_0()); }
	ruleActionBlock
{ after(grammarAccess.getActionAccess().getActionBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getActionStatementParserRuleCall_1()); }
	ruleActionStatement
{ after(grammarAccess.getActionAccess().getActionStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTrn__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTrnAccess().getFromToAssignment_0()); }
(rule__TargetTrn__FromToAssignment_0)
{ after(grammarAccess.getTargetTrnAccess().getFromToAssignment_0()); }
)

    |(
{ before(grammarAccess.getTargetTrnAccess().getGroup_1()); }
(rule__TargetTrn__Group_1__0)
{ after(grammarAccess.getTargetTrnAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessModifiersAccess().getPRIVATEEnumLiteralDeclaration_0()); }
(	'private' 
)
{ after(grammarAccess.getAccessModifiersAccess().getPRIVATEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAccessModifiersAccess().getPUBLICEnumLiteralDeclaration_1()); }
(	'public' 
)
{ after(grammarAccess.getAccessModifiersAccess().getPUBLICEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAccessModifiersAccess().getPROTECTEDEnumLiteralDeclaration_2()); }
(	'protected' 
)
{ after(grammarAccess.getAccessModifiersAccess().getPROTECTEDEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAccessModifiersAccess().getFINALEnumLiteralDeclaration_3()); }
(	'final' 
)
{ after(grammarAccess.getAccessModifiersAccess().getFINALEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getAccessModifiersAccess().getABSTRACTEnumLiteralDeclaration_4()); }
(	'abstract' 
)
{ after(grammarAccess.getAccessModifiersAccess().getABSTRACTEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateModifiers__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateModifiersAccess().getINITIALEnumLiteralDeclaration_0()); }
(	'initial' 
)
{ after(grammarAccess.getStateModifiersAccess().getINITIALEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStateModifiersAccess().getNONTERMINALEnumLiteralDeclaration_1()); }
(	'nonterminal' 
)
{ after(grammarAccess.getStateModifiersAccess().getNONTERMINALEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getStateModifiersAccess().getCONCURRENTEnumLiteralDeclaration_2()); }
(	'concurent' 
)
{ after(grammarAccess.getStateModifiersAccess().getCONCURRENTEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Root__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__0__Impl
	rule__Root__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getPackageAssignment_0()); }
(rule__Root__PackageAssignment_0)
{ after(grammarAccess.getRootAccess().getPackageAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__1__Impl
	rule__Root__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getImportsAssignment_1()); }
(rule__Root__ImportsAssignment_1)*
{ after(grammarAccess.getRootAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRootAccess().getMachineAssignment_2()); }
(rule__Root__MachineAssignment_2)
{ after(grammarAccess.getRootAccess().getMachineAssignment_2()); }
)
(
{ before(grammarAccess.getRootAccess().getMachineAssignment_2()); }
(rule__Root__MachineAssignment_2)*
{ after(grammarAccess.getRootAccess().getMachineAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Package__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__1__Impl
	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameAssignment_1()); }
(rule__Package__NameAssignment_1)
{ after(grammarAccess.getPackageAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getPackageAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Imports__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imports__Group__0__Impl
	rule__Imports__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportsAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imports__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imports__Group__1__Impl
	rule__Imports__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getNameAssignment_1()); }
(rule__Imports__NameAssignment_1)
{ after(grammarAccess.getImportsAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imports__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imports__Group__2__Impl
	rule__Imports__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getFullStopAsteriskKeyword_2()); }
(
	'.*' 
)?
{ after(grammarAccess.getImportsAccess().getFullStopAsteriskKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imports__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imports__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getImportsAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Machine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Machine__Group__0__Impl
	rule__Machine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getAccessAndMachineModifierAssignment_0()); }
(rule__Machine__AccessAndMachineModifierAssignment_0)
{ after(grammarAccess.getMachineAccess().getAccessAndMachineModifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Machine__Group__1__Impl
	rule__Machine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getMachineKeyword_1()); }

	'machine' 

{ after(grammarAccess.getMachineAccess().getMachineKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Machine__Group__2__Impl
	rule__Machine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getNameAssignment_2()); }
(rule__Machine__NameAssignment_2)
{ after(grammarAccess.getMachineAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Machine__Group__3__Impl
	rule__Machine__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getMachineAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Machine__Group__4__Impl
	rule__Machine__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getMachineBodyAssignment_4()); }
(rule__Machine__MachineBodyAssignment_4)
{ after(grammarAccess.getMachineAccess().getMachineBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Machine__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getMachineAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Uno__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Uno__Group__0__Impl
	rule__Uno__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Uno__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnoAccess().getDosParserRuleCall_0()); }
	ruleDos
{ after(grammarAccess.getUnoAccess().getDosParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Uno__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Uno__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Uno__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnoAccess().getGroup_1()); }
(rule__Uno__Group_1__0)*
{ after(grammarAccess.getUnoAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Uno__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Uno__Group_1__0__Impl
	rule__Uno__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Uno__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnoAccess().getUnoLeftAction_1_0()); }
(

)
{ after(grammarAccess.getUnoAccess().getUnoLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Uno__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Uno__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Uno__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnoAccess().getRightAssignment_1_1()); }
(rule__Uno__RightAssignment_1_1)
{ after(grammarAccess.getUnoAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AccessAndMachineModifiers__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessAndMachineModifiers__Group__0__Impl
	rule__AccessAndMachineModifiers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessAndMachineModifiers__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessAndMachineModifiersAccess().getAccessModifierAssignment_0()); }
(rule__AccessAndMachineModifiers__AccessModifierAssignment_0)
{ after(grammarAccess.getAccessAndMachineModifiersAccess().getAccessModifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AccessAndMachineModifiers__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AccessAndMachineModifiers__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AccessAndMachineModifiers__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessAndMachineModifiersAccess().getMachineModifierAssignment_1()); }
(rule__AccessAndMachineModifiers__MachineModifierAssignment_1)?
{ after(grammarAccess.getAccessAndMachineModifiersAccess().getMachineModifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__States__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group__0__Impl
	rule__States__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getStateModsAssignment_0()); }
(rule__States__StateModsAssignment_0)?
{ after(grammarAccess.getStatesAccess().getStateModsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__States__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group__1__Impl
	rule__States__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getStateKeyword_1()); }

	'state' 

{ after(grammarAccess.getStatesAccess().getStateKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__States__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group__2__Impl
	rule__States__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getNameAssignment_2()); }
(rule__States__NameAssignment_2)
{ after(grammarAccess.getStatesAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__States__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group__3__Impl
	rule__States__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getEnAssignment_3()); }
(rule__States__EnAssignment_3)?
{ after(grammarAccess.getStatesAccess().getEnAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__States__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group__4__Impl
	rule__States__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getExAssignment_4()); }
(rule__States__ExAssignment_4)?
{ after(grammarAccess.getStatesAccess().getExAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__States__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getAlternatives_5()); }
(rule__States__Alternatives_5)
{ after(grammarAccess.getStatesAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__States__Group_5_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group_5_0__0__Impl
	rule__States__Group_5_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group_5_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getColonKeyword_5_0_0()); }

	':' 

{ after(grammarAccess.getStatesAccess().getColonKeyword_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__States__Group_5_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__States__Group_5_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__States__Group_5_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getAlternatives_5_0_1()); }
(rule__States__Alternatives_5_0_1)
{ after(grammarAccess.getStatesAccess().getAlternatives_5_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Entry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entry__Group__0__Impl
	rule__Entry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getEntryKeyword_0()); }

	'entry' 

{ after(grammarAccess.getEntryAccess().getEntryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getAAssignment_1()); }
(rule__Entry__AAssignment_1)
{ after(grammarAccess.getEntryAccess().getAAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exit__Group__0__Impl
	rule__Exit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitAccess().getExitKeyword_0()); }

	'exit' 

{ after(grammarAccess.getExitAccess().getExitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitAccess().getAAssignment_1()); }
(rule__Exit__AAssignment_1)
{ after(grammarAccess.getExitAccess().getAAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MachineConstructor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__0__Impl
	rule__MachineConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getPublicKeyword_0()); }

	'public' 

{ after(grammarAccess.getMachineConstructorAccess().getPublicKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__1__Impl
	rule__MachineConstructor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getMachineNameAssignment_1()); }
(rule__MachineConstructor__MachineNameAssignment_1)
{ after(grammarAccess.getMachineConstructorAccess().getMachineNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__2__Impl
	rule__MachineConstructor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getMachineConstructorAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__3__Impl
	rule__MachineConstructor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getParamsMachineAssignment_3()); }
(rule__MachineConstructor__ParamsMachineAssignment_3)
{ after(grammarAccess.getMachineConstructorAccess().getParamsMachineAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__4__Impl
	rule__MachineConstructor__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMachineConstructorAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__5__Impl
	rule__MachineConstructor__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getMachineConstructorAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__6__Impl
	rule__MachineConstructor__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getMachineConstructorAccess().getGroup_6()); }
(rule__MachineConstructor__Group_6__0)
{ after(grammarAccess.getMachineConstructorAccess().getGroup_6()); }
)
(
{ before(grammarAccess.getMachineConstructorAccess().getGroup_6()); }
(rule__MachineConstructor__Group_6__0)*
{ after(grammarAccess.getMachineConstructorAccess().getGroup_6()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getMachineConstructorAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__MachineConstructor__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group_6__0__Impl
	rule__MachineConstructor__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getExprAssignment_6_0()); }
(rule__MachineConstructor__ExprAssignment_6_0)
{ after(grammarAccess.getMachineConstructorAccess().getExprAssignment_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group_6__1__Impl
	rule__MachineConstructor__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getAlternatives_6_1()); }
(rule__MachineConstructor__Alternatives_6_1)?
{ after(grammarAccess.getMachineConstructorAccess().getAlternatives_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getSemicolonKeyword_6_2()); }

	';' 

{ after(grammarAccess.getMachineConstructorAccess().getSemicolonKeyword_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MachineConstructor__Group_6_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group_6_1_0__0__Impl
	rule__MachineConstructor__Group_6_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group_6_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getLeftParenthesisKeyword_6_1_0_0()); }

	'(' 

{ after(grammarAccess.getMachineConstructorAccess().getLeftParenthesisKeyword_6_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group_6_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group_6_1_0__1__Impl
	rule__MachineConstructor__Group_6_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group_6_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getSTRINGTerminalRuleCall_6_1_0_1()); }
	RULE_STRING
{ after(grammarAccess.getMachineConstructorAccess().getSTRINGTerminalRuleCall_6_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineConstructor__Group_6_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineConstructor__Group_6_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__Group_6_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getRightParenthesisKeyword_6_1_0_2()); }

	')' 

{ after(grammarAccess.getMachineConstructorAccess().getRightParenthesisKeyword_6_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MachineInvocation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineInvocation__Group__0__Impl
	rule__MachineInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getMachineInvocationAction_0()); }
(

)
{ after(grammarAccess.getMachineInvocationAccess().getMachineInvocationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineInvocation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineInvocation__Group__1__Impl
	rule__MachineInvocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getMachineInvocationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineInvocation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineInvocation__Group__2__Impl
	rule__MachineInvocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getAlternatives_2()); }
(rule__MachineInvocation__Alternatives_2)
{ after(grammarAccess.getMachineInvocationAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineInvocation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineInvocation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getMachineInvocationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MachineInvocation__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineInvocation__Group_2_0__0__Impl
	rule__MachineInvocation__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getLeftParenthesisKeyword_2_0_0()); }

	'(' 

{ after(grammarAccess.getMachineInvocationAccess().getLeftParenthesisKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineInvocation__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineInvocation__Group_2_0__1__Impl
	rule__MachineInvocation__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getParamsInvocationParserRuleCall_2_0_1()); }
	ruleparamsInvocation
{ after(grammarAccess.getMachineInvocationAccess().getParamsInvocationParserRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MachineInvocation__Group_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MachineInvocation__Group_2_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MachineInvocation__Group_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineInvocationAccess().getRightParenthesisKeyword_2_0_2()); }

	')' 

{ after(grammarAccess.getMachineInvocationAccess().getRightParenthesisKeyword_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParamsDeclaration__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_0__0__Impl
	rule__ParamsDeclaration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getParamtypeAssignment_0_0()); }
(rule__ParamsDeclaration__ParamtypeAssignment_0_0)
{ after(grammarAccess.getParamsDeclarationAccess().getParamtypeAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamsDeclaration__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getNameAssignment_0_1()); }
(rule__ParamsDeclaration__NameAssignment_0_1)
{ after(grammarAccess.getParamsDeclarationAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParamsDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_1__0__Impl
	rule__ParamsDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getParamsDeclarationAccess().getGroup_1_0()); }
(rule__ParamsDeclaration__Group_1_0__0)
{ after(grammarAccess.getParamsDeclarationAccess().getGroup_1_0()); }
)
(
{ before(grammarAccess.getParamsDeclarationAccess().getGroup_1_0()); }
(rule__ParamsDeclaration__Group_1_0__0)*
{ after(grammarAccess.getParamsDeclarationAccess().getGroup_1_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamsDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_1__1__Impl
	rule__ParamsDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getParamtypeAssignment_1_1()); }
(rule__ParamsDeclaration__ParamtypeAssignment_1_1)
{ after(grammarAccess.getParamsDeclarationAccess().getParamtypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamsDeclaration__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getNameAssignment_1_2()); }
(rule__ParamsDeclaration__NameAssignment_1_2)
{ after(grammarAccess.getParamsDeclarationAccess().getNameAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParamsDeclaration__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_1_0__0__Impl
	rule__ParamsDeclaration__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getParamtypeAssignment_1_0_0()); }
(rule__ParamsDeclaration__ParamtypeAssignment_1_0_0)
{ after(grammarAccess.getParamsDeclarationAccess().getParamtypeAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamsDeclaration__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_1_0__1__Impl
	rule__ParamsDeclaration__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getNameAssignment_1_0_1()); }
(rule__ParamsDeclaration__NameAssignment_1_0_1)
{ after(grammarAccess.getParamsDeclarationAccess().getNameAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamsDeclaration__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsDeclaration__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getCommaKeyword_1_0_2()); }

	',' 

{ after(grammarAccess.getParamsDeclarationAccess().getCommaKeyword_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParamsInvocation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsInvocation__Group_1__0__Impl
	rule__ParamsInvocation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsInvocation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getParamsInvocationAccess().getGroup_1_0()); }
(rule__ParamsInvocation__Group_1_0__0)
{ after(grammarAccess.getParamsInvocationAccess().getGroup_1_0()); }
)
(
{ before(grammarAccess.getParamsInvocationAccess().getGroup_1_0()); }
(rule__ParamsInvocation__Group_1_0__0)*
{ after(grammarAccess.getParamsInvocationAccess().getGroup_1_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamsInvocation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsInvocation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsInvocation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParamsInvocation__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsInvocation__Group_1_0__0__Impl
	rule__ParamsInvocation__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsInvocation__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_1_0_0()); }
	RULE_ID
{ after(grammarAccess.getParamsInvocationAccess().getIDTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamsInvocation__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamsInvocation__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsInvocation__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsInvocationAccess().getCommaKeyword_1_0_1()); }

	',' 

{ after(grammarAccess.getParamsInvocationAccess().getCommaKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getThisKeyword_0()); }
(
	'this.' 
)?
{ after(grammarAccess.getExpressionAccess().getThisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getNameAssignment_1()); }
(rule__Expression__NameAssignment_1)
{ after(grammarAccess.getExpressionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getSecondAssignment_2()); }
(rule__Expression__SecondAssignment_2)
{ after(grammarAccess.getExpressionAccess().getSecondAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AssingExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssingExpression__Group__0__Impl
	rule__AssingExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssingExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssingExpressionAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getAssingExpressionAccess().getEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssingExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssingExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssingExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssingExpressionAccess().getAdditionParserRuleCall_1()); }
	ruleAddition
{ after(grammarAccess.getAssingExpressionAccess().getAdditionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdmiredExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdmiredExpression__Group__0__Impl
	rule__AdmiredExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdmiredExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdmiredExpressionAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getAdmiredExpressionAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdmiredExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdmiredExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdmiredExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdmiredExpressionAccess().getAdditionParserRuleCall_1()); }
	ruleAddition
{ after(grammarAccess.getAdmiredExpressionAccess().getAdditionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAddtionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getAddtionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
(rule__Addition__RightAssignment_1_2)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
(rule__Multiplication__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
	ruleAddition
{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }

	'transition' 

{ after(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getFromAssignment_1()); }
(rule__Transition__FromAssignment_1)
{ after(grammarAccess.getTransitionAccess().getFromAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAtAssignment_2()); }
(rule__Transition__AtAssignment_2)
{ after(grammarAccess.getTransitionAccess().getAtAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getToAssignment_3()); }
(rule__Transition__ToAssignment_3)
{ after(grammarAccess.getTransitionAccess().getToAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Transition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getTransitionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TargetTrn__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetTrn__Group_1__0__Impl
	rule__TargetTrn__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTrn__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTrnAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getTargetTrnAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetTrn__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetTrn__Group_1__1__Impl
	rule__TargetTrn__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTrn__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTrnAccess().getFromToListAssignment_1_1()); }
(rule__TargetTrn__FromToListAssignment_1_1)
{ after(grammarAccess.getTargetTrnAccess().getFromToListAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TargetTrn__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TargetTrn__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTrn__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTrnAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getTargetTrnAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ListStates__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListStates__Group__0__Impl
	rule__ListStates__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListStates__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getListStatesAccess().getGroup_0()); }
(rule__ListStates__Group_0__0)
{ after(grammarAccess.getListStatesAccess().getGroup_0()); }
)
(
{ before(grammarAccess.getListStatesAccess().getGroup_0()); }
(rule__ListStates__Group_0__0)*
{ after(grammarAccess.getListStatesAccess().getGroup_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListStates__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListStates__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListStates__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListStatesAccess().getListAssignment_1()); }
(rule__ListStates__ListAssignment_1)
{ after(grammarAccess.getListStatesAccess().getListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListStates__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListStates__Group_0__0__Impl
	rule__ListStates__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListStates__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListStatesAccess().getListAssignment_0_0()); }
(rule__ListStates__ListAssignment_0_0)
{ after(grammarAccess.getListStatesAccess().getListAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListStates__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListStates__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListStates__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListStatesAccess().getCommaKeyword_0_1()); }

	',' 

{ after(grammarAccess.getListStatesAccess().getCommaKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SubMachine__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubMachine__Group__0__Impl
	rule__SubMachine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubMachine__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubMachineAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getSubMachineAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubMachine__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubMachine__Group__1__Impl
	rule__SubMachine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubMachine__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubMachineAccess().getMachineModifierAssignment_1()); }
(rule__SubMachine__MachineModifierAssignment_1)?
{ after(grammarAccess.getSubMachineAccess().getMachineModifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubMachine__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubMachine__Group__2__Impl
	rule__SubMachine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubMachine__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubMachineAccess().getMachineBodyAssignment_2()); }
(rule__SubMachine__MachineBodyAssignment_2)
{ after(grammarAccess.getSubMachineAccess().getMachineBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SubMachine__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SubMachine__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubMachine__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubMachineAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getSubMachineAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Root__PackageAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getPackagePackageParserRuleCall_0_0()); }
	rulePackage{ after(grammarAccess.getRootAccess().getPackagePackageParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Root__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getImportsImportsParserRuleCall_1_0()); }
	ruleImports{ after(grammarAccess.getRootAccess().getImportsImportsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Root__MachineAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getMachineMachineParserRuleCall_2_0()); }
	ruleMachine{ after(grammarAccess.getRootAccess().getMachineMachineParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPackageAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Imports__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportsAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getImportsAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__AccessAndMachineModifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getAccessAndMachineModifierAccessAndMachineModifiersParserRuleCall_0_0()); }
	ruleAccessAndMachineModifiers{ after(grammarAccess.getMachineAccess().getAccessAndMachineModifierAccessAndMachineModifiersParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getMachineAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__MachineBodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineAccess().getMachineBodyMachineBodyParserRuleCall_4_0()); }
	ruleMachineBody{ after(grammarAccess.getMachineAccess().getMachineBodyMachineBodyParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Uno__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnoAccess().getRightDosParserRuleCall_1_1_0()); }
	ruleDos{ after(grammarAccess.getUnoAccess().getRightDosParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dos__HostBlockAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDosAccess().getHostBlockHostBlockParserRuleCall_0_0()); }
	ruleHostBlock{ after(grammarAccess.getDosAccess().getHostBlockHostBlockParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dos__MachineConstructorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDosAccess().getMachineConstructorMachineConstructorParserRuleCall_1_0()); }
	ruleMachineConstructor{ after(grammarAccess.getDosAccess().getMachineConstructorMachineConstructorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dos__StatesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDosAccess().getStatesStatesParserRuleCall_2_0()); }
	ruleStates{ after(grammarAccess.getDosAccess().getStatesStatesParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dos__TransitionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDosAccess().getTransitionTransitionParserRuleCall_3_0()); }
	ruleTransition{ after(grammarAccess.getDosAccess().getTransitionTransitionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessAndMachineModifiers__AccessModifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessAndMachineModifiersAccess().getAccessModifierAccessModifiersEnumRuleCall_0_0()); }
	ruleAccessModifiers{ after(grammarAccess.getAccessAndMachineModifiersAccess().getAccessModifierAccessModifiersEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessAndMachineModifiers__MachineModifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessAndMachineModifiersAccess().getMachineModifierMachineModifierParserRuleCall_1_0()); }
	ruleMachineModifier{ after(grammarAccess.getAccessAndMachineModifiersAccess().getMachineModifierMachineModifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineModifier__ConcurrentAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineModifierAccess().getConcurrentConcurrentKeyword_0()); }
(
{ before(grammarAccess.getMachineModifierAccess().getConcurrentConcurrentKeyword_0()); }

	'concurrent' 

{ after(grammarAccess.getMachineModifierAccess().getConcurrentConcurrentKeyword_0()); }
)

{ after(grammarAccess.getMachineModifierAccess().getConcurrentConcurrentKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__StateModsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getStateModsStateModifiersEnumRuleCall_0_0()); }
	ruleStateModifiers{ after(grammarAccess.getStatesAccess().getStateModsStateModifiersEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getNameQualifiedNameParserRuleCall_2_0()); }
	ruleQualifiedName{ after(grammarAccess.getStatesAccess().getNameQualifiedNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__EnAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getEnEntryParserRuleCall_3_0()); }
	ruleEntry{ after(grammarAccess.getStatesAccess().getEnEntryParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__ExAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getExExitParserRuleCall_4_0()); }
	ruleExit{ after(grammarAccess.getStatesAccess().getExExitParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__SubmachineAssignment_5_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getSubmachineSubMachineParserRuleCall_5_0_1_0_0()); }
	ruleSubMachine{ after(grammarAccess.getStatesAccess().getSubmachineSubMachineParserRuleCall_5_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__States__MachineInvocationsAssignment_5_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatesAccess().getMachineInvocationsMachineInvocationParserRuleCall_5_0_1_1_0()); }
	ruleMachineInvocation{ after(grammarAccess.getStatesAccess().getMachineInvocationsMachineInvocationParserRuleCall_5_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entry__AAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntryAccess().getAActionParserRuleCall_1_0()); }
	ruleAction{ after(grammarAccess.getEntryAccess().getAActionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exit__AAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExitAccess().getAActionParserRuleCall_1_0()); }
	ruleAction{ after(grammarAccess.getExitAccess().getAActionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__MachineNameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getMachineNameMachineCrossReference_1_0()); }
(
{ before(grammarAccess.getMachineConstructorAccess().getMachineNameMachineIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getMachineConstructorAccess().getMachineNameMachineIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getMachineConstructorAccess().getMachineNameMachineCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__ParamsMachineAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getParamsMachineParamsDeclarationParserRuleCall_3_0()); }
	ruleparamsDeclaration{ after(grammarAccess.getMachineConstructorAccess().getParamsMachineParamsDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MachineConstructor__ExprAssignment_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMachineConstructorAccess().getExprExpressionParserRuleCall_6_0_0()); }
	ruleExpression{ after(grammarAccess.getMachineConstructorAccess().getExprExpressionParserRuleCall_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__ParamtypeAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_0_0_0()); }
	RULE_ID{ after(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__ParamtypeAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_1_0_0_0()); }
	RULE_ID{ after(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__NameAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_1_0_1_0()); }
	RULE_ID{ after(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__ParamtypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getParamsDeclarationAccess().getParamtypeIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamsDeclaration__NameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_1_2_0()); }
	RULE_ID{ after(grammarAccess.getParamsDeclarationAccess().getNameIDTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__SecondAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getSecondAlternatives_2_0()); }
(rule__Expression__SecondAlternatives_2_0)
{ after(grammarAccess.getExpressionAccess().getSecondAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueINTAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueINTINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getNumberLiteralAccess().getValueINTINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueIDAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueIDQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getNumberLiteralAccess().getValueIDQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__RefValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getRefValueExpressionCrossReference_2_0()); }
(
{ before(grammarAccess.getNumberLiteralAccess().getRefValueExpressionIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getNumberLiteralAccess().getRefValueExpressionIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getNumberLiteralAccess().getRefValueExpressionCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionBlock__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionBlockAccess().getNameSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getActionBlockAccess().getNameSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionStatement__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionStatementAccess().getNameSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getActionStatementAccess().getNameSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__FromAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getFromTargetTrnParserRuleCall_1_0()); }
	ruleTargetTrn{ after(grammarAccess.getTransitionAccess().getFromTargetTrnParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__AtAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getAtAssingTransitionTerminalRuleCall_2_0()); }
	RULE_ASSINGTRANSITION{ after(grammarAccess.getTransitionAccess().getAtAssingTransitionTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ToAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getToTargetTrnParserRuleCall_3_0()); }
	ruleTargetTrn{ after(grammarAccess.getTransitionAccess().getToTargetTrnParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTrn__FromToAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTrnAccess().getFromToSingleStateParserRuleCall_0_0()); }
	ruleSingleState{ after(grammarAccess.getTargetTrnAccess().getFromToSingleStateParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TargetTrn__FromToListAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetTrnAccess().getFromToListListStatesParserRuleCall_1_1_0()); }
	ruleListStates{ after(grammarAccess.getTargetTrnAccess().getFromToListListStatesParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleState__FromToAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStateAccess().getFromToStatesCrossReference_0()); }
(
{ before(grammarAccess.getSingleStateAccess().getFromToStatesQualifiedNameParserRuleCall_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getSingleStateAccess().getFromToStatesQualifiedNameParserRuleCall_0_1()); }
)
{ after(grammarAccess.getSingleStateAccess().getFromToStatesCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListStates__ListAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListStatesAccess().getListSingleStateParserRuleCall_0_0_0()); }
	ruleSingleState{ after(grammarAccess.getListStatesAccess().getListSingleStateParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListStates__ListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListStatesAccess().getListSingleStateParserRuleCall_1_0()); }
	ruleSingleState{ after(grammarAccess.getListStatesAccess().getListSingleStateParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HostBlock__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHostBlockAccess().getTextPlainTextTerminalRuleCall_0()); }
	RULE_PLAINTEXT{ after(grammarAccess.getHostBlockAccess().getTextPlainTextTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubMachine__MachineModifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubMachineAccess().getMachineModifierMachineModifierParserRuleCall_1_0()); }
	ruleMachineModifier{ after(grammarAccess.getSubMachineAccess().getMachineModifierMachineModifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SubMachine__MachineBodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubMachineAccess().getMachineBodyMachineBodyParserRuleCall_2_0()); }
	ruleMachineBody{ after(grammarAccess.getSubMachineAccess().getMachineBodyMachineBodyParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}






RULE_ASSINGTRANSITION : ('-->'|'- [' ( options {greedy=false;} : . )*'] /' ( options {greedy=false;} : . )*'->'|'-' RULE_ID '?' RULE_ID '/' ( options {greedy=false;} : . )*'->');

RULE_PLAINTEXT : '<* ' ( options {greedy=false;} : . )*'*>';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


